
Garaje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ee0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  08003f3c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08003f3c  0000530c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdfd  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d88  00000000  00000000  00011e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00013c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c9  00000000  00000000  00014898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016572  00000000  00000000  00015261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df4d  00000000  00000000  0002b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc38  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7358  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000c739c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003df4 	.word	0x08003df4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003df4 	.word	0x08003df4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <tm1638_SDOhigh>:
#include <math.h>
#include <stdbool.h>


static void tm1638_SDOhigh(TM1638 *tm)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6858      	ldr	r0, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	8a5b      	ldrh	r3, [r3, #18]
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	f001 fc14 	bl	8001dc0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
//   HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <tm1638_SDOlow>:
static void tm1638_SDOlow(TM1638 *tm)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6858      	ldr	r0, [r3, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8a5b      	ldrh	r3, [r3, #18]
 80005b0:	2200      	movs	r2, #0
 80005b2:	4619      	mov	r1, r3
 80005b4:	f001 fc04 	bl	8001dc0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <tm1638_STBhigh>:
static void tm1638_STBhigh(TM1638 *tm)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6898      	ldr	r0, [r3, #8]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8a9b      	ldrh	r3, [r3, #20]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f001 fbf4 	bl	8001dc0 <HAL_GPIO_WritePin>
//    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
    //    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <tm1638_STBlow>:
static void tm1638_STBlow(TM1638 *tm)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6898      	ldr	r0, [r3, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8a9b      	ldrh	r3, [r3, #20]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f001 fbe4 	bl	8001dc0 <HAL_GPIO_WritePin>
    //     HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
    //     HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <tm1638_CLKhigh>:
static void tm1638_CLKhigh(TM1638 *tm)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8a1b      	ldrh	r3, [r3, #16]
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	f001 fbd4 	bl	8001dc0 <HAL_GPIO_WritePin>
    //        HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
    //     HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <tm1638_CLKlow>:
static void tm1638_CLKlow(TM1638 *tm)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8a1b      	ldrh	r3, [r3, #16]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f001 fbc4 	bl	8001dc0 <HAL_GPIO_WritePin>
    //       HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
    //      HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <tm1638_StartPacket>:
*/


// send signal to start transmission of data
static void tm1638_StartPacket(TM1638 *tm)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    tm1638_CLKhigh(tm);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffd9 	bl	8000600 <tm1638_CLKhigh>
    tm1638_STBhigh(tm);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ffb6 	bl	80005c0 <tm1638_STBhigh>
    tm1638_STBlow(tm);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffc3 	bl	80005e0 <tm1638_STBlow>
    tm1638_CLKlow(tm);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff ffe0 	bl	8000620 <tm1638_CLKlow>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <tm1638_EndPacket>:
// send signal to end transmission of data
static void tm1638_EndPacket(TM1638 *tm)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    tm1638_CLKlow(tm);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffd5 	bl	8000620 <tm1638_CLKlow>
    tm1638_STBlow(tm);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffb2 	bl	80005e0 <tm1638_STBlow>
    tm1638_CLKhigh(tm);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffbf 	bl	8000600 <tm1638_CLKhigh>
    tm1638_STBhigh(tm);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff9c 	bl	80005c0 <tm1638_STBhigh>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <tm1638_Confirm>:
// send signal necessary to confirm transmission of data when using fix address mode
static void tm1638_Confirm(TM1638 *tm)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    tm1638_STBlow(tm);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ffa1 	bl	80005e0 <tm1638_STBlow>
    tm1638_SDOlow(tm);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ff7e 	bl	80005a0 <tm1638_SDOlow>
    tm1638_STBhigh(tm);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff8b 	bl	80005c0 <tm1638_STBhigh>
    tm1638_SDOhigh(tm);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff68 	bl	8000580 <tm1638_SDOhigh>
    tm1638_STBlow(tm);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ff95 	bl	80005e0 <tm1638_STBlow>
    tm1638_SDOlow(tm);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff72 	bl	80005a0 <tm1638_SDOlow>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <tm1638_SendData>:

static void tm1638_SendData(TM1638 *tm, uint8_t Data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
    uint8_t ByteData[8] = {0};
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]

    // convert data to bit array
    for (uint8_t j = 0; j < 8; j++)
 80006d8:	2300      	movs	r3, #0
 80006da:	75fb      	strb	r3, [r7, #23]
 80006dc:	e012      	b.n	8000704 <tm1638_SendData+0x40>
    {
        ByteData[j] = (Data & (0x01 << j)) && 1;
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	fa42 f303 	asr.w	r3, r2, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	3318      	adds	r3, #24
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t j = 0; j < 8; j++)
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	3301      	adds	r3, #1
 8000702:	75fb      	strb	r3, [r7, #23]
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	2b07      	cmp	r3, #7
 8000708:	d9e9      	bls.n	80006de <tm1638_SendData+0x1a>
    }
    // send bit array
    for (int8_t j = 0; j < 8; j++)
 800070a:	2300      	movs	r3, #0
 800070c:	75bb      	strb	r3, [r7, #22]
 800070e:	e01a      	b.n	8000746 <tm1638_SendData+0x82>
    {
        tm1638_CLKlow(tm);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff85 	bl	8000620 <tm1638_CLKlow>
        if (ByteData[j] == GPIO_PIN_SET)
 8000716:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800071a:	3318      	adds	r3, #24
 800071c:	443b      	add	r3, r7
 800071e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d103      	bne.n	800072e <tm1638_SendData+0x6a>
        {
            tm1638_SDOhigh(tm);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff2a 	bl	8000580 <tm1638_SDOhigh>
 800072c:	e002      	b.n	8000734 <tm1638_SendData+0x70>
        }
        else
        {
            tm1638_SDOlow(tm);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff36 	bl	80005a0 <tm1638_SDOlow>
        }
        tm1638_CLKhigh(tm);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff63 	bl	8000600 <tm1638_CLKhigh>
    for (int8_t j = 0; j < 8; j++)
 800073a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	3301      	adds	r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	75bb      	strb	r3, [r7, #22]
 8000746:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800074a:	2b07      	cmp	r3, #7
 800074c:	dde0      	ble.n	8000710 <tm1638_SendData+0x4c>
    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <tm1638_DisplayClear>:


void tm1638_DisplayClear(TM1638 *tm)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
   // tm1638_InitPins(tm);
    tm1638_StartPacket(tm);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff6d 	bl	8000640 <tm1638_StartPacket>

    tm1638_SendData(tm, DATA_SET);     // 0x40 command Sets up sequential address mode.
 8000766:	2140      	movs	r1, #64	@ 0x40
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffab 	bl	80006c4 <tm1638_SendData>
    tm1638_Confirm(tm);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff8e 	bl	8000690 <tm1638_Confirm>

    tm1638_SendData(tm, 0xc0);   // Address 0
 8000774:	21c0      	movs	r1, #192	@ 0xc0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa4 	bl	80006c4 <tm1638_SendData>
    for (uint8_t i = 0; i < 16; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e006      	b.n	8000790 <tm1638_DisplayClear+0x38>
    {
        tm1638_SendData(tm, 0x00);
 8000782:	2100      	movs	r1, #0
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff9d 	bl	80006c4 <tm1638_SendData>
    for (uint8_t i = 0; i < 16; i++)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b0f      	cmp	r3, #15
 8000794:	d9f5      	bls.n	8000782 <tm1638_DisplayClear+0x2a>
    }
    tm1638_Confirm(tm);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff7a 	bl	8000690 <tm1638_Confirm>


    tm1638_SendData(tm, DISPLAY_OFF); // 0x80  1000 <0><000>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff90 	bl	80006c4 <tm1638_SendData>

    tm1638_EndPacket(tm);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff5f 	bl	8000668 <tm1638_EndPacket>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <tm1638_TurnOn>:
/**
 * @param brightness must be an integer between 0 and 7
 */
void tm1638_TurnOn(TM1638 *tm, uint8_t brightness)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
    if (brightness > 0 && brightness < 8)
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00c      	beq.n	80007e0 <tm1638_TurnOn+0x2c>
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	d809      	bhi.n	80007e0 <tm1638_TurnOn+0x2c>
    {
        brightness = brightness | DISPLAY_ON; // 0x88 1000 <1><000>
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	f063 0377 	orn	r3, r3, #119	@ 0x77
 80007d2:	70fb      	strb	r3, [r7, #3]
        tm1638_SendData(tm, brightness);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff73 	bl	80006c4 <tm1638_SendData>
 80007de:	e004      	b.n	80007ea <tm1638_TurnOn+0x36>
    }
    else
    {
        tm1638_DisplayTxt(tm, "Error 1");
 80007e0:	4903      	ldr	r1, [pc, #12]	@ (80007f0 <tm1638_TurnOn+0x3c>)
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f830 	bl	8000848 <tm1638_DisplayTxt>
        return;
 80007e8:	bf00      	nop
    }
}
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08003e0c 	.word	0x08003e0c

080007f4 <tm1638_DisplayChar>:

void tm1638_DisplayChar(TM1638 *tm, int position, char c, bool dot)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4611      	mov	r1, r2
 8000800:	461a      	mov	r2, r3
 8000802:	460b      	mov	r3, r1
 8000804:	71fb      	strb	r3, [r7, #7]
 8000806:	4613      	mov	r3, r2
 8000808:	71bb      	strb	r3, [r7, #6]
	        int hex = chr_to_hex(c);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fa0f 	bl	8000c30 <chr_to_hex>
 8000812:	4603      	mov	r3, r0
 8000814:	617b      	str	r3, [r7, #20]
	        if (hex >= 0)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0b      	blt.n	8000834 <tm1638_DisplayChar+0x40>
	        {
	            if (dot)
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <tm1638_DisplayChar+0x34>
	            {
	            	hex += 0x80; // activa punto decimal
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3380      	adds	r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
	            }

	            tm1638_Seg(tm, position, hex);
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f000 f8d5 	bl	80009dc <tm1638_Seg>
 8000832:	e004      	b.n	800083e <tm1638_DisplayChar+0x4a>

	        }
	        else
	        {
	            tm1638_DisplayTxt(tm, "Error 7");
 8000834:	4903      	ldr	r1, [pc, #12]	@ (8000844 <tm1638_DisplayChar+0x50>)
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f806 	bl	8000848 <tm1638_DisplayTxt>
	            return;
 800083c:	bf00      	nop
	        }

}
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08003e14 	.word	0x08003e14

08000848 <tm1638_DisplayTxt>:

/**
 * @param c must have a maximum length of 8(+ 8 maximum dots) and must contain only valid characters
 */
void tm1638_DisplayTxt(TM1638 *tm, char *c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    char padded[8] = "        ";
 8000852:	4a36      	ldr	r2, [pc, #216]	@ (800092c <tm1638_DisplayTxt+0xe4>)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t dot[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000860:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <tm1638_DisplayTxt+0xe8>)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086a:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t p = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	77fb      	strb	r3, [r7, #31]
    for (int8_t i = strlen(c) - 1; i >= 0; i--)
 8000872:	6838      	ldr	r0, [r7, #0]
 8000874:	f7ff fcb4 	bl	80001e0 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3b01      	subs	r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	77bb      	strb	r3, [r7, #30]
 8000882:	e027      	b.n	80008d4 <tm1638_DisplayTxt+0x8c>
    {
        if (p == 8)
 8000884:	7ffb      	ldrb	r3, [r7, #31]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d104      	bne.n	8000894 <tm1638_DisplayTxt+0x4c>
        {
            tm1638_DisplayTxt(tm, "Error 2");
 800088a:	492a      	ldr	r1, [pc, #168]	@ (8000934 <tm1638_DisplayTxt+0xec>)
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ffdb 	bl	8000848 <tm1638_DisplayTxt>
 8000892:	e048      	b.n	8000926 <tm1638_DisplayTxt+0xde>
            return;
        }

        if (c[i] == '.')
 8000894:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000898:	683a      	ldr	r2, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b2e      	cmp	r3, #46	@ 0x2e
 80008a0:	d106      	bne.n	80008b0 <tm1638_DisplayTxt+0x68>
            dot[p] = 1;
 80008a2:	7ffb      	ldrb	r3, [r7, #31]
 80008a4:	3320      	adds	r3, #32
 80008a6:	443b      	add	r3, r7
 80008a8:	2201      	movs	r2, #1
 80008aa:	f803 2c14 	strb.w	r2, [r3, #-20]
 80008ae:	e00b      	b.n	80008c8 <tm1638_DisplayTxt+0x80>
        else
            padded[p++] = c[i];
 80008b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	441a      	add	r2, r3
 80008b8:	7ffb      	ldrb	r3, [r7, #31]
 80008ba:	1c59      	adds	r1, r3, #1
 80008bc:	77f9      	strb	r1, [r7, #31]
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	3320      	adds	r3, #32
 80008c2:	443b      	add	r3, r7
 80008c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (int8_t i = strlen(c) - 1; i >= 0; i--)
 80008c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	77bb      	strb	r3, [r7, #30]
 80008d4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dad3      	bge.n	8000884 <tm1638_DisplayTxt+0x3c>
    }


    for (int8_t i = 7; i >= 0; i--)
 80008dc:	2307      	movs	r3, #7
 80008de:	777b      	strb	r3, [r7, #29]
 80008e0:	e01d      	b.n	800091e <tm1638_DisplayTxt+0xd6>
    {
    	tm1638_DisplayChar(tm, 7 - i + 1,padded[i],dot[i]);
 80008e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80008e6:	f1c3 0108 	rsb	r1, r3, #8
 80008ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80008ee:	3320      	adds	r3, #32
 80008f0:	443b      	add	r3, r7
 80008f2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80008f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80008fa:	3320      	adds	r3, #32
 80008fc:	443b      	add	r3, r7
 80008fe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff71 	bl	80007f4 <tm1638_DisplayChar>
    for (int8_t i = 7; i >= 0; i--)
 8000912:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3b01      	subs	r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	777b      	strb	r3, [r7, #29]
 800091e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dadd      	bge.n	80008e2 <tm1638_DisplayTxt+0x9a>
    }

  //  tm1638_TurnOn(tm, 1);
}
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08003e24 	.word	0x08003e24
 8000930:	08003e2c 	.word	0x08003e2c
 8000934:	08003e1c 	.word	0x08003e1c

08000938 <tm1638_Led>:

void tm1638_Led(TM1638 *tm, int position, int on)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
    if (!(position >= 1 && position <= 8))
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	dd02      	ble.n	8000950 <tm1638_Led+0x18>
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b08      	cmp	r3, #8
 800094e:	dd04      	ble.n	800095a <tm1638_Led+0x22>
    {
        tm1638_DisplayTxt(tm, "Error 3");
 8000950:	4920      	ldr	r1, [pc, #128]	@ (80009d4 <tm1638_Led+0x9c>)
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff ff78 	bl	8000848 <tm1638_DisplayTxt>
        return;
 8000958:	e038      	b.n	80009cc <tm1638_Led+0x94>
    }
    if (!(on == 0 || on == 1))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d007      	beq.n	8000970 <tm1638_Led+0x38>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d004      	beq.n	8000970 <tm1638_Led+0x38>
    {
        tm1638_DisplayTxt(tm, "Error 4");
 8000966:	491c      	ldr	r1, [pc, #112]	@ (80009d8 <tm1638_Led+0xa0>)
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff ff6d 	bl	8000848 <tm1638_DisplayTxt>
        return;
 800096e:	e02d      	b.n	80009cc <tm1638_Led+0x94>
    }
   // tm1638_InitPins(tm);
    tm1638_StartPacket(tm);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fe65 	bl	8000640 <tm1638_StartPacket>

    tm1638_SendData(tm, DATA_SET);  // 0x40 command Sets up sequential address mode.
 8000976:	2140      	movs	r1, #64	@ 0x40
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff fea3 	bl	80006c4 <tm1638_SendData>
    tm1638_Confirm(tm);
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fe86 	bl	8000690 <tm1638_Confirm>

    //tm1638_SendData(tm, 0xc0 + 0x01 * 2 * position - 0x01); // Address
    tm1638_SendData(tm, 0xc0 +  2 * position - 0x01); // Address impar LED 2n-1
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3360      	adds	r3, #96	@ 0x60
 8000988:	b2db      	uxtb	r3, r3
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3b01      	subs	r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f7ff fe95 	bl	80006c4 <tm1638_SendData>

    tm1638_CLKhigh(tm);
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fe30 	bl	8000600 <tm1638_CLKhigh>
    tm1638_SDOhigh(tm);
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fded 	bl	8000580 <tm1638_SDOhigh>
    tm1638_SDOlow(tm);
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff fdfa 	bl	80005a0 <tm1638_SDOlow>

    tm1638_SendData(tm, on);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fe86 	bl	80006c4 <tm1638_SendData>
    tm1638_Confirm(tm);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff fe69 	bl	8000690 <tm1638_Confirm>

    tm1638_TurnOn(tm, 7);
 80009be:	2107      	movs	r1, #7
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fef7 	bl	80007b4 <tm1638_TurnOn>

    tm1638_EndPacket(tm);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fe4e 	bl	8000668 <tm1638_EndPacket>
}
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08003e34 	.word	0x08003e34
 80009d8:	08003e3c 	.word	0x08003e3c

080009dc <tm1638_Seg>:


void tm1638_Seg(TM1638 *tm, int position, int data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
    if (!(position >= 1 && position <= 8))
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dd02      	ble.n	80009f4 <tm1638_Seg+0x18>
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	dd04      	ble.n	80009fe <tm1638_Seg+0x22>
    {
        tm1638_DisplayTxt(tm, "Error 5");
 80009f4:	491f      	ldr	r1, [pc, #124]	@ (8000a74 <tm1638_Seg+0x98>)
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff ff26 	bl	8000848 <tm1638_DisplayTxt>
        return;
 80009fc:	e036      	b.n	8000a6c <tm1638_Seg+0x90>
    }
    if (!(data >= 0x00 && data <= 0xff))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db02      	blt.n	8000a0a <tm1638_Seg+0x2e>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2bff      	cmp	r3, #255	@ 0xff
 8000a08:	dd04      	ble.n	8000a14 <tm1638_Seg+0x38>
    {
        tm1638_DisplayTxt(tm, "Error 6");
 8000a0a:	491b      	ldr	r1, [pc, #108]	@ (8000a78 <tm1638_Seg+0x9c>)
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff ff1b 	bl	8000848 <tm1638_DisplayTxt>
        return;
 8000a12:	e02b      	b.n	8000a6c <tm1638_Seg+0x90>
    }
   // tm1638_InitPins(tm);
    tm1638_StartPacket(tm);
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fe13 	bl	8000640 <tm1638_StartPacket>

    tm1638_SendData(tm, DATA_SET); // 0x40 command Sets up sequential address mode.
 8000a1a:	2140      	movs	r1, #64	@ 0x40
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fe51 	bl	80006c4 <tm1638_SendData>
    tm1638_Confirm(tm);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fe34 	bl	8000690 <tm1638_Confirm>

   // tm1638_SendData(tm, 0xc0 + 0x01 * 2 * (position - 1)); // Address par DISPLAY
    tm1638_SendData(tm, 0xc0 +  2 * (position - 1)); // Address par DISPLAY 2 (n-1)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	335f      	adds	r3, #95	@ 0x5f
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff fe45 	bl	80006c4 <tm1638_SendData>

    tm1638_CLKhigh(tm);
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fde0 	bl	8000600 <tm1638_CLKhigh>
    tm1638_SDOhigh(tm);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fd9d 	bl	8000580 <tm1638_SDOhigh>
    tm1638_SDOlow(tm);
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fdaa 	bl	80005a0 <tm1638_SDOlow>
    tm1638_SendData(tm, data);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	4619      	mov	r1, r3
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fe36 	bl	80006c4 <tm1638_SendData>
    tm1638_Confirm(tm);
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fe19 	bl	8000690 <tm1638_Confirm>

    tm1638_TurnOn(tm, 7);
 8000a5e:	2107      	movs	r1, #7
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff fea7 	bl	80007b4 <tm1638_TurnOn>

    tm1638_EndPacket(tm);
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f7ff fdfe 	bl	8000668 <tm1638_EndPacket>
}
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08003e44 	.word	0x08003e44
 8000a78:	08003e4c 	.word	0x08003e4c

08000a7c <tm1638_KeyState>:

bool tm1638_KeyState(TM1638 *tm,uint8_t buttons,int position)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	460b      	mov	r3, r1
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	72fb      	strb	r3, [r7, #11]
	if (!(position >= 1 && position <= 8))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd02      	ble.n	8000a96 <tm1638_KeyState+0x1a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	dd05      	ble.n	8000aa2 <tm1638_KeyState+0x26>
	{
		tm1638_DisplayTxt(tm, "Error K");
 8000a96:	490b      	ldr	r1, [pc, #44]	@ (8000ac4 <tm1638_KeyState+0x48>)
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fed5 	bl	8000848 <tm1638_DisplayTxt>
		return false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e00c      	b.n	8000abc <tm1638_KeyState+0x40>
	}
	//uint8_t buttons=tm1638_ScanButtons(tm);
    bool ok= (buttons & 1<<(position-1)) != 0;
 8000aa2:	7afa      	ldrb	r2, [r7, #11]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	fa42 f303 	asr.w	r3, r2, r3
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	75fb      	strb	r3, [r7, #23]

	return (ok);
 8000aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08003e54 	.word	0x08003e54

08000ac8 <tm1638_ScanButtons>:
static int a[32] = {0, 0, 0, 0, 0, 0, 0, 0,
		     0, 0, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0, 0, 0};
uint8_t tm1638_ScanButtons(TM1638 *tm)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	@ 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  //  HAL_GPIO_WritePin(VCC_GPIO_Port, VCC_Pin, 1);

    int ok = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int keys=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28

            tm1638_StartPacket(tm);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fda9 	bl	8000640 <tm1638_StartPacket>
            tm1638_SendData(tm, DATA_READ); //0x42 Read the buttons.
 8000aee:	2142      	movs	r1, #66	@ 0x42
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fde7 	bl	80006c4 <tm1638_SendData>

            GPIO_InitStruct.Pin = DIO_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
            HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	4848      	ldr	r0, [pc, #288]	@ (8000c28 <tm1638_ScanButtons+0x160>)
 8000b06:	f000 ffbf 	bl	8001a88 <HAL_GPIO_Init>

            int indice=-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
            for (int i = 0; i < 4; i++)  // 4 bytes
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	e02c      	b.n	8000b70 <tm1638_ScanButtons+0xa8>
            {
                tm1638_CLKhigh(tm);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fd72 	bl	8000600 <tm1638_CLKhigh>
                for (int j = 0; j < 8; j++)  // 8 bits
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	e020      	b.n	8000b64 <tm1638_ScanButtons+0x9c>
                {
                    tm1638_CLKhigh(tm);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fd6c 	bl	8000600 <tm1638_CLKhigh>

                   // HAL_Delay(1);  por que???????
                    indice++;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
                    a[indice] = HAL_GPIO_ReadPin(DIO_GPIO_Port, DIO_Pin);
 8000b2e:	2120      	movs	r1, #32
 8000b30:	483d      	ldr	r0, [pc, #244]	@ (8000c28 <tm1638_ScanButtons+0x160>)
 8000b32:	f001 f92d 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (a[indice] && j != 0)
 8000b42:	4a3a      	ldr	r2, [pc, #232]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d004      	beq.n	8000b58 <tm1638_ScanButtons+0x90>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <tm1638_ScanButtons+0x90>
                        ok = 0;  // button pressed
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    tm1638_CLKlow(tm);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fd61 	bl	8000620 <tm1638_CLKlow>
                for (int j = 0; j < 8; j++)  // 8 bits
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3301      	adds	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	dddb      	ble.n	8000b22 <tm1638_ScanButtons+0x5a>
            for (int i = 0; i < 4; i++)  // 4 bytes
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	ddcf      	ble.n	8000b16 <tm1638_ScanButtons+0x4e>
                }
            }
            tm1638_CLKhigh(tm);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fd42 	bl	8000600 <tm1638_CLKhigh>
            tm1638_STBhigh(tm);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fd1f 	bl	80005c0 <tm1638_STBhigh>


        GPIO_InitStruct.Pin = DIO_Pin;
 8000b82:	2320      	movs	r3, #32
 8000b84:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4825      	ldr	r0, [pc, #148]	@ (8000c28 <tm1638_ScanButtons+0x160>)
 8000b92:	f000 ff79 	bl	8001a88 <HAL_GPIO_Init>

    if (ok==0) {
 8000b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d13f      	bne.n	8000c1c <tm1638_ScanButtons+0x154>
        if (a[1]==1) keys |= 0x1;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d103      	bne.n	8000bac <tm1638_ScanButtons+0xe4>
 8000ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[9]==1) keys |= 0x2;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d103      	bne.n	8000bbc <tm1638_ScanButtons+0xf4>
 8000bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[17]==1) keys |= 0x4;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d103      	bne.n	8000bcc <tm1638_ScanButtons+0x104>
 8000bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[25]==1) keys |= 0x8;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d103      	bne.n	8000bdc <tm1638_ScanButtons+0x114>
 8000bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[5]==1) keys |= 0x10;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d103      	bne.n	8000bec <tm1638_ScanButtons+0x124>
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[13]==1) keys |= 0x20;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d103      	bne.n	8000bfc <tm1638_ScanButtons+0x134>
 8000bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[21]==1) keys |= 0x40;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d103      	bne.n	8000c0c <tm1638_ScanButtons+0x144>
 8000c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
       if (a[29]==1) keys |= 0x80;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <tm1638_ScanButtons+0x164>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d103      	bne.n	8000c1c <tm1638_ScanButtons+0x154>
 8000c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    return keys;
 8000c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	20000078 	.word	0x20000078

08000c30 <chr_to_hex>:
        }
    }
}

int8_t chr_to_hex(char c)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    switch (c)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	3b20      	subs	r3, #32
 8000c3e:	2b59      	cmp	r3, #89	@ 0x59
 8000c40:	f200 8104 	bhi.w	8000e4c <chr_to_hex+0x21c>
 8000c44:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <chr_to_hex+0x1c>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000ddd 	.word	0x08000ddd
 8000c50:	08000e4d 	.word	0x08000e4d
 8000c54:	08000e4d 	.word	0x08000e4d
 8000c58:	08000e4d 	.word	0x08000e4d
 8000c5c:	08000e4d 	.word	0x08000e4d
 8000c60:	08000e4d 	.word	0x08000e4d
 8000c64:	08000e4d 	.word	0x08000e4d
 8000c68:	08000e4d 	.word	0x08000e4d
 8000c6c:	08000e4d 	.word	0x08000e4d
 8000c70:	08000e4d 	.word	0x08000e4d
 8000c74:	08000e4d 	.word	0x08000e4d
 8000c78:	08000e4d 	.word	0x08000e4d
 8000c7c:	08000e4d 	.word	0x08000e4d
 8000c80:	08000e19 	.word	0x08000e19
 8000c84:	08000e4d 	.word	0x08000e4d
 8000c88:	08000e4d 	.word	0x08000e4d
 8000c8c:	08000db5 	.word	0x08000db5
 8000c90:	08000db9 	.word	0x08000db9
 8000c94:	08000dbd 	.word	0x08000dbd
 8000c98:	08000dc1 	.word	0x08000dc1
 8000c9c:	08000dc5 	.word	0x08000dc5
 8000ca0:	08000dc9 	.word	0x08000dc9
 8000ca4:	08000dcd 	.word	0x08000dcd
 8000ca8:	08000dd1 	.word	0x08000dd1
 8000cac:	08000dd5 	.word	0x08000dd5
 8000cb0:	08000dd9 	.word	0x08000dd9
 8000cb4:	08000e4d 	.word	0x08000e4d
 8000cb8:	08000e4d 	.word	0x08000e4d
 8000cbc:	08000e4d 	.word	0x08000e4d
 8000cc0:	08000e4d 	.word	0x08000e4d
 8000cc4:	08000e4d 	.word	0x08000e4d
 8000cc8:	08000e4d 	.word	0x08000e4d
 8000ccc:	08000e4d 	.word	0x08000e4d
 8000cd0:	08000de1 	.word	0x08000de1
 8000cd4:	08000de5 	.word	0x08000de5
 8000cd8:	08000de9 	.word	0x08000de9
 8000cdc:	08000e4d 	.word	0x08000e4d
 8000ce0:	08000ded 	.word	0x08000ded
 8000ce4:	08000df1 	.word	0x08000df1
 8000ce8:	08000e4d 	.word	0x08000e4d
 8000cec:	08000df5 	.word	0x08000df5
 8000cf0:	08000df9 	.word	0x08000df9
 8000cf4:	08000dfd 	.word	0x08000dfd
 8000cf8:	08000e4d 	.word	0x08000e4d
 8000cfc:	08000e01 	.word	0x08000e01
 8000d00:	08000e4d 	.word	0x08000e4d
 8000d04:	08000e4d 	.word	0x08000e4d
 8000d08:	08000e05 	.word	0x08000e05
 8000d0c:	08000e09 	.word	0x08000e09
 8000d10:	08000e4d 	.word	0x08000e4d
 8000d14:	08000e4d 	.word	0x08000e4d
 8000d18:	08000e0d 	.word	0x08000e0d
 8000d1c:	08000e4d 	.word	0x08000e4d
 8000d20:	08000e11 	.word	0x08000e11
 8000d24:	08000e4d 	.word	0x08000e4d
 8000d28:	08000e4d 	.word	0x08000e4d
 8000d2c:	08000e4d 	.word	0x08000e4d
 8000d30:	08000e4d 	.word	0x08000e4d
 8000d34:	08000e4d 	.word	0x08000e4d
 8000d38:	08000e4d 	.word	0x08000e4d
 8000d3c:	08000e4d 	.word	0x08000e4d
 8000d40:	08000e4d 	.word	0x08000e4d
 8000d44:	08000e4d 	.word	0x08000e4d
 8000d48:	08000e15 	.word	0x08000e15
 8000d4c:	08000e4d 	.word	0x08000e4d
 8000d50:	08000e1d 	.word	0x08000e1d
 8000d54:	08000e21 	.word	0x08000e21
 8000d58:	08000e25 	.word	0x08000e25
 8000d5c:	08000e29 	.word	0x08000e29
 8000d60:	08000e4d 	.word	0x08000e4d
 8000d64:	08000e4d 	.word	0x08000e4d
 8000d68:	08000e4d 	.word	0x08000e4d
 8000d6c:	08000e2d 	.word	0x08000e2d
 8000d70:	08000e31 	.word	0x08000e31
 8000d74:	08000e4d 	.word	0x08000e4d
 8000d78:	08000e4d 	.word	0x08000e4d
 8000d7c:	08000e4d 	.word	0x08000e4d
 8000d80:	08000e4d 	.word	0x08000e4d
 8000d84:	08000e35 	.word	0x08000e35
 8000d88:	08000e39 	.word	0x08000e39
 8000d8c:	08000e4d 	.word	0x08000e4d
 8000d90:	08000e4d 	.word	0x08000e4d
 8000d94:	08000e3d 	.word	0x08000e3d
 8000d98:	08000e4d 	.word	0x08000e4d
 8000d9c:	08000e41 	.word	0x08000e41
 8000da0:	08000e45 	.word	0x08000e45
 8000da4:	08000e4d 	.word	0x08000e4d
 8000da8:	08000e4d 	.word	0x08000e4d
 8000dac:	08000e4d 	.word	0x08000e4d
 8000db0:	08000e49 	.word	0x08000e49
    {
    case '0':
        return 0x3f;
 8000db4:	233f      	movs	r3, #63	@ 0x3f
 8000db6:	e04b      	b.n	8000e50 <chr_to_hex+0x220>
    case '1':
        return 0x06;
 8000db8:	2306      	movs	r3, #6
 8000dba:	e049      	b.n	8000e50 <chr_to_hex+0x220>
    case '2':
        return 0x5b;
 8000dbc:	235b      	movs	r3, #91	@ 0x5b
 8000dbe:	e047      	b.n	8000e50 <chr_to_hex+0x220>
    case '3':
        return 0x4f;
 8000dc0:	234f      	movs	r3, #79	@ 0x4f
 8000dc2:	e045      	b.n	8000e50 <chr_to_hex+0x220>
    case '4':
        return 0x66;
 8000dc4:	2366      	movs	r3, #102	@ 0x66
 8000dc6:	e043      	b.n	8000e50 <chr_to_hex+0x220>
    case '5':
        return 0x6d;
 8000dc8:	236d      	movs	r3, #109	@ 0x6d
 8000dca:	e041      	b.n	8000e50 <chr_to_hex+0x220>
    case '6':
        return 0x7d;
 8000dcc:	237d      	movs	r3, #125	@ 0x7d
 8000dce:	e03f      	b.n	8000e50 <chr_to_hex+0x220>
    case '7':
        return 0x07;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	e03d      	b.n	8000e50 <chr_to_hex+0x220>
    case '8':
        return 0x7f;
 8000dd4:	237f      	movs	r3, #127	@ 0x7f
 8000dd6:	e03b      	b.n	8000e50 <chr_to_hex+0x220>
    case '9':
        return 0x6f;
 8000dd8:	236f      	movs	r3, #111	@ 0x6f
 8000dda:	e039      	b.n	8000e50 <chr_to_hex+0x220>
    case ' ':
        return 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e037      	b.n	8000e50 <chr_to_hex+0x220>
    case 'A':
        return 0x77;
 8000de0:	2377      	movs	r3, #119	@ 0x77
 8000de2:	e035      	b.n	8000e50 <chr_to_hex+0x220>
    case 'B':
        return 0x7f;
 8000de4:	237f      	movs	r3, #127	@ 0x7f
 8000de6:	e033      	b.n	8000e50 <chr_to_hex+0x220>
    case 'C':
        return 0x39;
 8000de8:	2339      	movs	r3, #57	@ 0x39
 8000dea:	e031      	b.n	8000e50 <chr_to_hex+0x220>
    case 'E':
        return 0x79;
 8000dec:	2379      	movs	r3, #121	@ 0x79
 8000dee:	e02f      	b.n	8000e50 <chr_to_hex+0x220>
    case 'F':
        return 0x71;
 8000df0:	2371      	movs	r3, #113	@ 0x71
 8000df2:	e02d      	b.n	8000e50 <chr_to_hex+0x220>
    case 'H':
        return 0x76;
 8000df4:	2376      	movs	r3, #118	@ 0x76
 8000df6:	e02b      	b.n	8000e50 <chr_to_hex+0x220>
    case 'I':
        return 0x06;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	e029      	b.n	8000e50 <chr_to_hex+0x220>
    case 'J':
        return 0x0e;
 8000dfc:	230e      	movs	r3, #14
 8000dfe:	e027      	b.n	8000e50 <chr_to_hex+0x220>
    case 'L':
        return 0x38;
 8000e00:	2338      	movs	r3, #56	@ 0x38
 8000e02:	e025      	b.n	8000e50 <chr_to_hex+0x220>
    case 'O':
        return 0x3f;
 8000e04:	233f      	movs	r3, #63	@ 0x3f
 8000e06:	e023      	b.n	8000e50 <chr_to_hex+0x220>
    case 'P':
        return 0x73;
 8000e08:	2373      	movs	r3, #115	@ 0x73
 8000e0a:	e021      	b.n	8000e50 <chr_to_hex+0x220>
    case 'S':
        return 0x6d;
 8000e0c:	236d      	movs	r3, #109	@ 0x6d
 8000e0e:	e01f      	b.n	8000e50 <chr_to_hex+0x220>
    case 'U':
        return 0x3e;
 8000e10:	233e      	movs	r3, #62	@ 0x3e
 8000e12:	e01d      	b.n	8000e50 <chr_to_hex+0x220>
    case '_':
        return 0x08;
 8000e14:	2308      	movs	r3, #8
 8000e16:	e01b      	b.n	8000e50 <chr_to_hex+0x220>
    case '-':
        return 0x40;
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	e019      	b.n	8000e50 <chr_to_hex+0x220>
    case 'a':
        return 0x5f;
 8000e1c:	235f      	movs	r3, #95	@ 0x5f
 8000e1e:	e017      	b.n	8000e50 <chr_to_hex+0x220>
    case 'b':
        return 0x7c;
 8000e20:	237c      	movs	r3, #124	@ 0x7c
 8000e22:	e015      	b.n	8000e50 <chr_to_hex+0x220>
    case 'c':
        return 0x58;
 8000e24:	2358      	movs	r3, #88	@ 0x58
 8000e26:	e013      	b.n	8000e50 <chr_to_hex+0x220>
    case 'd':
        return 0x5e;
 8000e28:	235e      	movs	r3, #94	@ 0x5e
 8000e2a:	e011      	b.n	8000e50 <chr_to_hex+0x220>
    case 'h':
        return 0x74;
 8000e2c:	2374      	movs	r3, #116	@ 0x74
 8000e2e:	e00f      	b.n	8000e50 <chr_to_hex+0x220>
    case 'i':
        return 0x04;
 8000e30:	2304      	movs	r3, #4
 8000e32:	e00d      	b.n	8000e50 <chr_to_hex+0x220>
    case 'n':
        return 0x54;
 8000e34:	2354      	movs	r3, #84	@ 0x54
 8000e36:	e00b      	b.n	8000e50 <chr_to_hex+0x220>
    case 'o':
        return 0x5c;
 8000e38:	235c      	movs	r3, #92	@ 0x5c
 8000e3a:	e009      	b.n	8000e50 <chr_to_hex+0x220>
    case 'r':
        return 0x50;
 8000e3c:	2350      	movs	r3, #80	@ 0x50
 8000e3e:	e007      	b.n	8000e50 <chr_to_hex+0x220>
    case 't':
        return 0x78;
 8000e40:	2378      	movs	r3, #120	@ 0x78
 8000e42:	e005      	b.n	8000e50 <chr_to_hex+0x220>
    case 'u':
        return 0x1c;
 8000e44:	231c      	movs	r3, #28
 8000e46:	e003      	b.n	8000e50 <chr_to_hex+0x220>
    case 'y':
        return 0x6e;
 8000e48:	236e      	movs	r3, #110	@ 0x6e
 8000e4a:	e001      	b.n	8000e50 <chr_to_hex+0x220>

    }
    return -0x01;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <ShowLed.1>:
	tm1638_DisplayClear(&TM);       // Limpia el contenido del display

	char buffer[9];                  // Buffer para almacenar texto a mostrar

	// Función para mostrar el estado de los LEDs según la posición
	void ShowLed(int leds) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	f8c7 c000 	str.w	ip, [r7]
		for (int i = 1; i <= 8; i++) {
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e00e      	b.n	8000e8c <ShowLed.1+0x30>
			tm1638_Led(&TM, i, i <= leds); // Enciende los LEDs hasta la posición actual
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	bfd4      	ite	le
 8000e76:	2301      	movle	r3, #1
 8000e78:	2300      	movgt	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68f9      	ldr	r1, [r7, #12]
 8000e80:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <ShowLed.1+0x40>)
 8000e82:	f7ff fd59 	bl	8000938 <tm1638_Led>
		for (int i = 1; i <= 8; i++) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	dded      	ble.n	8000e6e <ShowLed.1+0x12>
		}
	}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000188 	.word	0x20000188

08000ea0 <main>:
int main(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	60fb      	str	r3, [r7, #12]
	HAL_Init();
 8000eac:	f000 fc44 	bl	8001738 <HAL_Init>
	SystemClock_Config();
 8000eb0:	f000 f97a 	bl	80011a8 <SystemClock_Config>
	MX_GPIO_Init();           // Inicializa los pines GPIO
 8000eb4:	f000 fa50 	bl	8001358 <MX_GPIO_Init>
	MX_USART2_UART_Init();    // Inicializa la comunicación UART
 8000eb8:	f000 fa24 	bl	8001304 <MX_USART2_UART_Init>
	MX_TIM3_Init();           // Inicializa el temporizador 3
 8000ebc:	f000 f9d4 	bl	8001268 <MX_TIM3_Init>
	TM.clk_port = CLK_GPIO_Port;   // Asigna el puerto del reloj
 8000ec0:	4b99      	ldr	r3, [pc, #612]	@ (8001128 <main+0x288>)
 8000ec2:	4a9a      	ldr	r2, [pc, #616]	@ (800112c <main+0x28c>)
 8000ec4:	601a      	str	r2, [r3, #0]
	TM.clk_pin = CLK_Pin;          // Asigna el pin del reloj
 8000ec6:	4b98      	ldr	r3, [pc, #608]	@ (8001128 <main+0x288>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	821a      	strh	r2, [r3, #16]
	TM.stb_port = STB_GPIO_Port;   // Asigna el puerto del strobe
 8000ecc:	4b96      	ldr	r3, [pc, #600]	@ (8001128 <main+0x288>)
 8000ece:	4a98      	ldr	r2, [pc, #608]	@ (8001130 <main+0x290>)
 8000ed0:	609a      	str	r2, [r3, #8]
	TM.stb_pin = STB_Pin;          // Asigna el pin del strobe
 8000ed2:	4b95      	ldr	r3, [pc, #596]	@ (8001128 <main+0x288>)
 8000ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed8:	829a      	strh	r2, [r3, #20]
	TM.dio_port = DIO_GPIO_Port;   // Asigna el puerto de datos
 8000eda:	4b93      	ldr	r3, [pc, #588]	@ (8001128 <main+0x288>)
 8000edc:	4a93      	ldr	r2, [pc, #588]	@ (800112c <main+0x28c>)
 8000ede:	605a      	str	r2, [r3, #4]
	TM.dio_pin = DIO_Pin;          // Asigna el pin de datos
 8000ee0:	4b91      	ldr	r3, [pc, #580]	@ (8001128 <main+0x288>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	825a      	strh	r2, [r3, #18]
	tm1638_TurnOn(&TM, 7);         // Enciende el display con brillo máximo (7)
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	488f      	ldr	r0, [pc, #572]	@ (8001128 <main+0x288>)
 8000eea:	f7ff fc63 	bl	80007b4 <tm1638_TurnOn>
	tm1638_DisplayClear(&TM);       // Limpia el contenido del display
 8000eee:	488e      	ldr	r0, [pc, #568]	@ (8001128 <main+0x288>)
 8000ef0:	f7ff fc32 	bl	8000758 <tm1638_DisplayClear>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	// Guarda el último estado del botón B1 para detectar cambios
	last_value_B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000ef4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef8:	488e      	ldr	r0, [pc, #568]	@ (8001134 <main+0x294>)
 8000efa:	f000 ff49 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b8d      	ldr	r3, [pc, #564]	@ (8001138 <main+0x298>)
 8000f04:	601a      	str	r2, [r3, #0]

	// Bucle principal del programa
	while (1) {
		// Lee el estado actual del botón B1
		value_B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000f06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0a:	488a      	ldr	r0, [pc, #552]	@ (8001134 <main+0x294>)
 8000f0c:	f000 ff40 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b89      	ldr	r3, [pc, #548]	@ (800113c <main+0x29c>)
 8000f16:	601a      	str	r2, [r3, #0]
		// Detecta flanco positivo (transición de alto a bajo)
		flancoP_B1 = (last_value_B1 != value_B1) && !value_B1;
 8000f18:	4b87      	ldr	r3, [pc, #540]	@ (8001138 <main+0x298>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b87      	ldr	r3, [pc, #540]	@ (800113c <main+0x29c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d005      	beq.n	8000f30 <main+0x90>
 8000f24:	4b85      	ldr	r3, [pc, #532]	@ (800113c <main+0x29c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <main+0x90>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <main+0x92>
 8000f30:	2300      	movs	r3, #0
 8000f32:	4a83      	ldr	r2, [pc, #524]	@ (8001140 <main+0x2a0>)
 8000f34:	6013      	str	r3, [r2, #0]

		// Debounce del botón
		if (flancoP_B1)
 8000f36:	4b82      	ldr	r3, [pc, #520]	@ (8001140 <main+0x2a0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <main+0xa6>
			HAL_Delay(500);
 8000f3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f42:	f000 fc6b 	bl	800181c <HAL_Delay>

		//Máquina de estados - Transiciones
		switch (estado) {
 8000f46:	4b7f      	ldr	r3, [pc, #508]	@ (8001144 <main+0x2a4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	f200 8093 	bhi.w	8001076 <main+0x1d6>
 8000f50:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <main+0xb8>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f71 	.word	0x08000f71
 8000f5c:	08000f8b 	.word	0x08000f8b
 8000f60:	08000fa5 	.word	0x08000fa5
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08001041 	.word	0x08001041
 8000f6c:	08001051 	.word	0x08001051
		case stCerrado:
			if (flancoP_B1) {              // Si se presiona el botón
 8000f70:	4b73      	ldr	r3, [pc, #460]	@ (8001140 <main+0x2a0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d073      	beq.n	8001060 <main+0x1c0>
				estado = stAbriendo;        // Cambia al estado de apertura
 8000f78:	4b72      	ldr	r3, [pc, #456]	@ (8001144 <main+0x2a4>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	701a      	strb	r2, [r3, #0]
				timer = HAL_GetTick();      // Inicia el temporizador
 8000f7e:	f000 fc41 	bl	8001804 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a70      	ldr	r2, [pc, #448]	@ (8001148 <main+0x2a8>)
 8000f86:	6013      	str	r3, [r2, #0]
			}
			break;
 8000f88:	e06a      	b.n	8001060 <main+0x1c0>

		case stAbierto:
			if (flancoP_B1) {              // Si se presiona el botón
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001140 <main+0x2a0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d068      	beq.n	8001064 <main+0x1c4>
				estado = stCerrando;        // Cambia al estado de cierre
 8000f92:	4b6c      	ldr	r3, [pc, #432]	@ (8001144 <main+0x2a4>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	701a      	strb	r2, [r3, #0]
				timer = HAL_GetTick();      // Inicia el temporizador
 8000f98:	f000 fc34 	bl	8001804 <HAL_GetTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8001148 <main+0x2a8>)
 8000fa0:	6013      	str	r3, [r2, #0]
			}
			break;
 8000fa2:	e05f      	b.n	8001064 <main+0x1c4>

		case stCerrando:
			if (flancoP_B1) {              // Si se presiona el botón
 8000fa4:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <main+0x2a0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <main+0x114>
				estado = stParadoCerrado;   // Detiene el cierre
 8000fac:	4b65      	ldr	r3, [pc, #404]	@ (8001144 <main+0x2a4>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e01a      	b.n	8000fea <main+0x14a>
			} else {
				// Verifica si ha pasado 1 segundo
				if ((HAL_GetTick() - timer) > 1000) {
 8000fb4:	f000 fc26 	bl	8001804 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b63      	ldr	r3, [pc, #396]	@ (8001148 <main+0x2a8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fc4:	d911      	bls.n	8000fea <main+0x14a>
					if (BarreraOk())        // Si no hay obstáculos
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	469c      	mov	ip, r3
 8000fcc:	f000 f8ca 	bl	8001164 <BarreraOk.0>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <main+0x140>
						posicion--;          // Decrementa la posición
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800114c <main+0x2ac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800114c <main+0x2ac>)
 8000fde:	6013      	str	r3, [r2, #0]
					timer = HAL_GetTick();   // Reinicia el temporizador
 8000fe0:	f000 fc10 	bl	8001804 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a58      	ldr	r2, [pc, #352]	@ (8001148 <main+0x2a8>)
 8000fe8:	6013      	str	r3, [r2, #0]
				}
			}
			// Si llegó a la posición cerrada
			if (posicion == 0)
 8000fea:	4b58      	ldr	r3, [pc, #352]	@ (800114c <main+0x2ac>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d13a      	bne.n	8001068 <main+0x1c8>
				estado = stCerrado;
 8000ff2:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <main+0x2a4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e036      	b.n	8001068 <main+0x1c8>

		case stAbriendo:
			if (flancoP_B1) {              // Si se presiona el botón
 8000ffa:	4b51      	ldr	r3, [pc, #324]	@ (8001140 <main+0x2a0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <main+0x16a>
				estado = stParadoAbriendo;  // Detiene la apertura
 8001002:	4b50      	ldr	r3, [pc, #320]	@ (8001144 <main+0x2a4>)
 8001004:	2204      	movs	r2, #4
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e012      	b.n	8001030 <main+0x190>
			} else {
				// Verifica si ha pasado 1 segundo
				if ((HAL_GetTick() - timer) > 1000) {
 800100a:	f000 fbfb 	bl	8001804 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	4b4d      	ldr	r3, [pc, #308]	@ (8001148 <main+0x2a8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800101a:	d909      	bls.n	8001030 <main+0x190>
					posicion++;             // Incrementa la posición
 800101c:	4b4b      	ldr	r3, [pc, #300]	@ (800114c <main+0x2ac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a4a      	ldr	r2, [pc, #296]	@ (800114c <main+0x2ac>)
 8001024:	6013      	str	r3, [r2, #0]
					timer = HAL_GetTick();  // Reinicia el temporizador
 8001026:	f000 fbed 	bl	8001804 <HAL_GetTick>
 800102a:	4603      	mov	r3, r0
 800102c:	4a46      	ldr	r2, [pc, #280]	@ (8001148 <main+0x2a8>)
 800102e:	6013      	str	r3, [r2, #0]
				}
			}
			// Si llegó a la posición abierta
			if (posicion == PASOS)
 8001030:	4b46      	ldr	r3, [pc, #280]	@ (800114c <main+0x2ac>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d119      	bne.n	800106c <main+0x1cc>
				estado = stAbierto;
 8001038:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <main+0x2a4>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
			break;
 800103e:	e015      	b.n	800106c <main+0x1cc>

		case stParadoAbriendo:
			if (flancoP_B1) {              // Si se presiona el botón
 8001040:	4b3f      	ldr	r3, [pc, #252]	@ (8001140 <main+0x2a0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <main+0x1d0>
				estado = stCerrando;        // Comienza el cierre
 8001048:	4b3e      	ldr	r3, [pc, #248]	@ (8001144 <main+0x2a4>)
 800104a:	2202      	movs	r2, #2
 800104c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800104e:	e00f      	b.n	8001070 <main+0x1d0>

		case stParadoCerrado:
			if (flancoP_B1) {              // Si se presiona el botón
 8001050:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <main+0x2a0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00d      	beq.n	8001074 <main+0x1d4>
				estado = stAbriendo;        // Comienza la apertura
 8001058:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <main+0x2a4>)
 800105a:	2203      	movs	r2, #3
 800105c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800105e:	e009      	b.n	8001074 <main+0x1d4>
			break;
 8001060:	bf00      	nop
 8001062:	e008      	b.n	8001076 <main+0x1d6>
			break;
 8001064:	bf00      	nop
 8001066:	e006      	b.n	8001076 <main+0x1d6>
			break;
 8001068:	bf00      	nop
 800106a:	e004      	b.n	8001076 <main+0x1d6>
			break;
 800106c:	bf00      	nop
 800106e:	e002      	b.n	8001076 <main+0x1d6>
			break;
 8001070:	bf00      	nop
 8001072:	e000      	b.n	8001076 <main+0x1d6>
			break;
 8001074:	bf00      	nop
		}

		//Máquina de estados - Acciones
		switch (estado) {
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <main+0x2a4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b05      	cmp	r3, #5
 800107c:	d849      	bhi.n	8001112 <main+0x272>
 800107e:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <main+0x1e4>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010a7 	.word	0x080010a7
 800108c:	080010cf 	.word	0x080010cf
 8001090:	080010b1 	.word	0x080010b1
 8001094:	08001109 	.word	0x08001109
 8001098:	08001109 	.word	0x08001109
		case stCerrado:
			tm1638_DisplayTxt(&TM, "cLoSE");  // Muestra "CLOSE" en el display
 800109c:	492c      	ldr	r1, [pc, #176]	@ (8001150 <main+0x2b0>)
 800109e:	4822      	ldr	r0, [pc, #136]	@ (8001128 <main+0x288>)
 80010a0:	f7ff fbd2 	bl	8000848 <tm1638_DisplayTxt>
			break;
 80010a4:	e035      	b.n	8001112 <main+0x272>

		case stAbierto:
			tm1638_DisplayTxt(&TM, "oPEn");   // Muestra "OPEN" en el display
 80010a6:	492b      	ldr	r1, [pc, #172]	@ (8001154 <main+0x2b4>)
 80010a8:	481f      	ldr	r0, [pc, #124]	@ (8001128 <main+0x288>)
 80010aa:	f7ff fbcd 	bl	8000848 <tm1638_DisplayTxt>
			break;
 80010ae:	e030      	b.n	8001112 <main+0x272>

		case stAbriendo:
			sprintf(buffer, "%02d", PASOS - posicion);  // Formatea el contador
 80010b0:	4b26      	ldr	r3, [pc, #152]	@ (800114c <main+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1c3 0208 	rsb	r2, r3, #8
 80010b8:	463b      	mov	r3, r7
 80010ba:	4927      	ldr	r1, [pc, #156]	@ (8001158 <main+0x2b8>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 f9f9 	bl	80034b4 <siprintf>
			tm1638_DisplayTxt(&TM, buffer);    // Muestra la cuenta regresiva
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4818      	ldr	r0, [pc, #96]	@ (8001128 <main+0x288>)
 80010c8:	f7ff fbbe 	bl	8000848 <tm1638_DisplayTxt>
			break;
 80010cc:	e021      	b.n	8001112 <main+0x272>

		case stCerrando:
			if (!BarreraOk())
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	469c      	mov	ip, r3
 80010d4:	f000 f846 	bl	8001164 <BarreraOk.0>
 80010d8:	4603      	mov	r3, r0
 80010da:	f083 0301 	eor.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <main+0x24e>
				tm1638_DisplayTxt(&TM, "bArrErA");  // Indica obstáculo
 80010e4:	491d      	ldr	r1, [pc, #116]	@ (800115c <main+0x2bc>)
 80010e6:	4810      	ldr	r0, [pc, #64]	@ (8001128 <main+0x288>)
 80010e8:	f7ff fbae 	bl	8000848 <tm1638_DisplayTxt>
			else {
				sprintf(buffer, "%02d", posicion);   // Formatea la posición
				tm1638_DisplayTxt(&TM, buffer);    // Muestra la posición actual
			}
			break;
 80010ec:	e011      	b.n	8001112 <main+0x272>
				sprintf(buffer, "%02d", posicion);   // Formatea la posición
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <main+0x2ac>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	463b      	mov	r3, r7
 80010f4:	4918      	ldr	r1, [pc, #96]	@ (8001158 <main+0x2b8>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f9dc 	bl	80034b4 <siprintf>
				tm1638_DisplayTxt(&TM, buffer);    // Muestra la posición actual
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <main+0x288>)
 8001102:	f7ff fba1 	bl	8000848 <tm1638_DisplayTxt>
			break;
 8001106:	e004      	b.n	8001112 <main+0x272>

		case stParadoAbriendo:
		case stParadoCerrado:
			tm1638_DisplayTxt(&TM, "PArAdo");  // Indica estado detenido
 8001108:	4915      	ldr	r1, [pc, #84]	@ (8001160 <main+0x2c0>)
 800110a:	4807      	ldr	r0, [pc, #28]	@ (8001128 <main+0x288>)
 800110c:	f7ff fb9c 	bl	8000848 <tm1638_DisplayTxt>
			break;
 8001110:	bf00      	nop
		}

		// Actualiza los LEDs según la posición actual
		ShowLed(PASOS - posicion);
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <main+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1c3 0308 	rsb	r3, r3, #8
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	4694      	mov	ip, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe9b 	bl	8000e5c <ShowLed.1>
		value_B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001126:	e6ee      	b.n	8000f06 <main+0x66>
 8001128:	20000188 	.word	0x20000188
 800112c:	40020400 	.word	0x40020400
 8001130:	40020000 	.word	0x40020000
 8001134:	40020800 	.word	0x40020800
 8001138:	200001ac 	.word	0x200001ac
 800113c:	200001b0 	.word	0x200001b0
 8001140:	200001a8 	.word	0x200001a8
 8001144:	200001a4 	.word	0x200001a4
 8001148:	200001b8 	.word	0x200001b8
 800114c:	200001b4 	.word	0x200001b4
 8001150:	08003e5c 	.word	0x08003e5c
 8001154:	08003e64 	.word	0x08003e64
 8001158:	08003e6c 	.word	0x08003e6c
 800115c:	08003e74 	.word	0x08003e74
 8001160:	08003e7c 	.word	0x08003e7c

08001164 <BarreraOk.0>:
	bool BarreraOk() {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t buttons = tm1638_ScanButtons(&TM); // Lee el estado de los botones
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <BarreraOk.0+0x40>)
 8001170:	f7ff fcaa 	bl	8000ac8 <tm1638_ScanButtons>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
		return !tm1638_KeyState(&TM, buttons, 1); // Retorna true si no hay obstáculo
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <BarreraOk.0+0x40>)
 8001180:	f7ff fc7c 	bl	8000a7c <tm1638_KeyState>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
	}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000188 	.word	0x20000188

080011a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	@ 0x50
 80011ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2230      	movs	r2, #48	@ 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f99c 	bl	80034f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <SystemClock_Config+0xb8>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <SystemClock_Config+0xb8>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	@ 0x40
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <SystemClock_Config+0xb8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <SystemClock_Config+0xbc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <SystemClock_Config+0xbc>)
 80011f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <SystemClock_Config+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2310      	movs	r3, #16
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fe0d 	bl	8001e3c <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x84>
		Error_Handler();
 8001228:	f000 f934 	bl	8001494 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f86f 	bl	800232c <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xb0>
		Error_Handler();
 8001254:	f000 f91e 	bl	8001494 <Error_Handler>
	}
}
 8001258:	bf00      	nop
 800125a:	3750      	adds	r7, #80	@ 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_TIM3_Init+0x94>)
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <MX_TIM3_Init+0x98>)
 8001288:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_TIM3_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_TIM3_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_TIM3_Init+0x94>)
 8001298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_TIM3_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_TIM3_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80012aa:	4814      	ldr	r0, [pc, #80]	@ (80012fc <MX_TIM3_Init+0x94>)
 80012ac:	f001 fa5e 	bl	800276c <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x52>
		Error_Handler();
 80012b6:	f000 f8ed 	bl	8001494 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	@ (80012fc <MX_TIM3_Init+0x94>)
 80012c8:	f001 fb8f 	bl	80029ea <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80012d2:	f000 f8df 	bl	8001494 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_TIM3_Init+0x94>)
 80012e4:	f001 fda0 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80012ee:	f000 f8d1 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000f8 	.word	0x200000f8
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f001 fdf6 	bl	8002f2c <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001346:	f000 f8a5 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000140 	.word	0x20000140
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <MX_GPIO_Init+0x12c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a43      	ldr	r2, [pc, #268]	@ (8001484 <MX_GPIO_Init+0x12c>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <MX_GPIO_Init+0x12c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <MX_GPIO_Init+0x12c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a3c      	ldr	r2, [pc, #240]	@ (8001484 <MX_GPIO_Init+0x12c>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <MX_GPIO_Init+0x12c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a35      	ldr	r2, [pc, #212]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b33      	ldr	r3, [pc, #204]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <MX_GPIO_Init+0x12c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | STB_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80013e4:	4828      	ldr	r0, [pc, #160]	@ (8001488 <MX_GPIO_Init+0x130>)
 80013e6:	f000 fceb 	bl	8001dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CLK_Pin | DIO_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2130      	movs	r1, #48	@ 0x30
 80013ee:	4827      	ldr	r0, [pc, #156]	@ (800148c <MX_GPIO_Init+0x134>)
 80013f0:	f000 fce6 	bl	8001dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4821      	ldr	r0, [pc, #132]	@ (8001490 <MX_GPIO_Init+0x138>)
 800140c:	f000 fb3c 	bl	8001a88 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin STB_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | STB_Pin;
 8001410:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001414:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4817      	ldr	r0, [pc, #92]	@ (8001488 <MX_GPIO_Init+0x130>)
 800142a:	f000 fb2d 	bl	8001a88 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001432:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001434:	2312      	movs	r3, #18
 8001436:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001440:	2304      	movs	r3, #4
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480f      	ldr	r0, [pc, #60]	@ (8001488 <MX_GPIO_Init+0x130>)
 800144c:	f000 fb1c 	bl	8001a88 <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_Pin DIO_Pin */
	GPIO_InitStruct.Pin = CLK_Pin | DIO_Pin;
 8001450:	2330      	movs	r3, #48	@ 0x30
 8001452:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4809      	ldr	r0, [pc, #36]	@ (800148c <MX_GPIO_Init+0x134>)
 8001468:	f000 fb0e 	bl	8001a88 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2028      	movs	r0, #40	@ 0x28
 8001472:	f000 fad2 	bl	8001a1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001476:	2028      	movs	r0, #40	@ 0x28
 8001478:	f000 faeb 	bl	8001a52 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	@ 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800

08001494 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_MspInit+0x4c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014de:	2007      	movs	r0, #7
 80014e0:	f000 fa90 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_TIM_Base_MspInit+0x48>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d115      	bne.n	800152e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_TIM_Base_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <HAL_TIM_Base_MspInit+0x4c>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_TIM_Base_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201d      	movs	r0, #29
 8001524:	f000 fa79 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001528:	201d      	movs	r0, #29
 800152a:	f000 fa92 	bl	8001a52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40000400 	.word	0x40000400
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_UART_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159a:	230c      	movs	r3, #12
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_UART_MspInit+0x8c>)
 80015b6:	f000 fa67 	bl	8001a88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40004400 	.word	0x40004400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f8d9 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM3_IRQHandler+0x10>)
 8001636:	f001 f8e8 	bl	800280a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000f8 	.word	0x200000f8

08001644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001648:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800164c:	f000 fbd2 	bl	8001df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f001 ff3e 	bl	8003504 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20018000 	.word	0x20018000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	200001bc 	.word	0x200001bc
 80016bc:	20000310 	.word	0x20000310

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001712:	f001 fefd 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff fbc3 	bl	8000ea0 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800171c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001728:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 800172c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001730:	2000030c 	.word	0x2000030c

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f94f 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fe98 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f967 	bl	8001a6e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f92f 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	200001c0 	.word	0x200001c0

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200001c0 	.word	0x200001c0

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	@ (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	@ (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	@ 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e159      	b.n	8001d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8148 	bne.w	8001d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a2 	beq.w	8001d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b57      	ldr	r3, [pc, #348]	@ (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	4a56      	ldr	r2, [pc, #344]	@ (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1e:	4b54      	ldr	r3, [pc, #336]	@ (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a52      	ldr	r2, [pc, #328]	@ (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a49      	ldr	r2, [pc, #292]	@ (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x202>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a48      	ldr	r2, [pc, #288]	@ (8001d7c <HAL_GPIO_Init+0x2f4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x1fe>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <HAL_GPIO_Init+0x2f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a46      	ldr	r2, [pc, #280]	@ (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x1f6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a45      	ldr	r2, [pc, #276]	@ (8001d88 <HAL_GPIO_Init+0x300>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x1f2>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	@ (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a2f      	ldr	r2, [pc, #188]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a24      	ldr	r2, [pc, #144]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1a      	ldr	r2, [pc, #104]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_GPIO_Init+0x304>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f aea2 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f806 	bl	8001e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e267      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d075      	beq.n	8001f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e5a:	4b88      	ldr	r3, [pc, #544]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b85      	ldr	r3, [pc, #532]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d112      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b82      	ldr	r3, [pc, #520]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	4b7e      	ldr	r3, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d157      	bne.n	8001f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e242      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x74>
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xb0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b70      	ldr	r3, [pc, #448]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6c      	ldr	r2, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xb0>
 8001ed4:	4b69      	ldr	r3, [pc, #420]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a68      	ldr	r2, [pc, #416]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc86 	bl	8001804 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fc82 	bl	8001804 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e207      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xc0>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fc72 	bl	8001804 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fc6e 	bl	8001804 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1f3      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b51      	ldr	r3, [pc, #324]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0xe8>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x152>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1c7      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4937      	ldr	r1, [pc, #220]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_RCC_OscConfig+0x244>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fc27 	bl	8001804 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fc23 	bl	8001804 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1a8      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4925      	ldr	r1, [pc, #148]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x244>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fc06 	bl	8001804 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fc02 	bl	8001804 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e187      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d036      	beq.n	8002094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_RCC_OscConfig+0x248>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff fbe6 	bl	8001804 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fbe2 	bl	8001804 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e167      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_OscConfig+0x240>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x200>
 800205a:	e01b      	b.n	8002094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x248>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff fbcf 	bl	8001804 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	e00e      	b.n	8002088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff fbcb 	bl	8001804 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d907      	bls.n	8002088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e150      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
 800207c:	40023800 	.word	0x40023800
 8002080:	42470000 	.word	0x42470000
 8002084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b88      	ldr	r3, [pc, #544]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ea      	bne.n	800206a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8097 	beq.w	80021d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a7c      	ldr	r2, [pc, #496]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b7a      	ldr	r3, [pc, #488]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b77      	ldr	r3, [pc, #476]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b74      	ldr	r3, [pc, #464]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a73      	ldr	r2, [pc, #460]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fb8b 	bl	8001804 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff fb87 	bl	8001804 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e10c      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b6a      	ldr	r3, [pc, #424]	@ (80022b0 <HAL_RCC_OscConfig+0x474>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x2ea>
 8002118:	4b64      	ldr	r3, [pc, #400]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a63      	ldr	r2, [pc, #396]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x324>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x30c>
 800212e:	4b5f      	ldr	r3, [pc, #380]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	4a5e      	ldr	r2, [pc, #376]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	@ 0x70
 800213a:	4b5c      	ldr	r3, [pc, #368]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	4a5b      	ldr	r2, [pc, #364]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	@ 0x70
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x324>
 8002148:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214c:	4a57      	ldr	r2, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	@ 0x70
 8002154:	4b55      	ldr	r3, [pc, #340]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	4a54      	ldr	r2, [pc, #336]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fb4c 	bl	8001804 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff fb48 	bl	8001804 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0cb      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0ee      	beq.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff fb36 	bl	8001804 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fb32 	bl	8001804 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0b5      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ee      	bne.n	800219c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a38      	ldr	r2, [pc, #224]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a1 	beq.w	800231c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021da:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d05c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d141      	bne.n	8002272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b31      	ldr	r3, [pc, #196]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb06 	bl	8001804 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff fb02 	bl	8001804 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e087      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	491b      	ldr	r1, [pc, #108]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff fadb 	bl	8001804 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7ff fad7 	bl	8001804 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e05c      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x416>
 8002270:	e054      	b.n	800231c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_RCC_OscConfig+0x478>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fac4 	bl	8001804 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff fac0 	bl	8001804 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e045      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_OscConfig+0x470>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
 800229e:	e03d      	b.n	800231c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e038      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
 80022b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x4ec>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d028      	beq.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d121      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d11a      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d111      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	3b01      	subs	r3, #1
 8002302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0cc      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b68      	ldr	r3, [pc, #416]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d90c      	bls.n	8002368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b65      	ldr	r3, [pc, #404]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d044      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d119      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e067      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b37      	ldr	r3, [pc, #220]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4934      	ldr	r1, [pc, #208]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7ff f9f2 	bl	8001804 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7ff f9ee 	bl	8001804 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d20c      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f952 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08003e84 	.word	0x08003e84
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b094      	sub	sp, #80	@ 0x50
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4b79      	ldr	r3, [pc, #484]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d00d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x40>
 800251c:	2b08      	cmp	r3, #8
 800251e:	f200 80e1 	bhi.w	80026e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x3a>
 800252a:	e0db      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b73      	ldr	r3, [pc, #460]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002530:	e0db      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b73      	ldr	r3, [pc, #460]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x208>)
 8002534:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002536:	e0d8      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b6f      	ldr	r3, [pc, #444]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002540:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002542:	4b6d      	ldr	r3, [pc, #436]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002558:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	633b      	str	r3, [r7, #48]	@ 0x30
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	@ 0x34
 8002566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800256a:	4622      	mov	r2, r4
 800256c:	462b      	mov	r3, r5
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	0159      	lsls	r1, r3, #5
 8002578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257c:	0150      	lsls	r0, r2, #5
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4621      	mov	r1, r4
 8002584:	1a51      	subs	r1, r2, r1
 8002586:	6139      	str	r1, [r7, #16]
 8002588:	4629      	mov	r1, r5
 800258a:	eb63 0301 	sbc.w	r3, r3, r1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800259c:	4659      	mov	r1, fp
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a6:	4651      	mov	r1, sl
 80025a8:	018a      	lsls	r2, r1, #6
 80025aa:	4651      	mov	r1, sl
 80025ac:	ebb2 0801 	subs.w	r8, r2, r1
 80025b0:	4659      	mov	r1, fp
 80025b2:	eb63 0901 	sbc.w	r9, r3, r1
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ca:	4690      	mov	r8, r2
 80025cc:	4699      	mov	r9, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	eb18 0303 	adds.w	r3, r8, r3
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	462b      	mov	r3, r5
 80025d8:	eb49 0303 	adc.w	r3, r9, r3
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ea:	4629      	mov	r1, r5
 80025ec:	024b      	lsls	r3, r1, #9
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f4:	4621      	mov	r1, r4
 80025f6:	024a      	lsls	r2, r1, #9
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fe:	2200      	movs	r2, #0
 8002600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002608:	f7fd fe42 	bl	8000290 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4613      	mov	r3, r2
 8002612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002614:	e058      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002616:	4b38      	ldr	r3, [pc, #224]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	2200      	movs	r2, #0
 800261e:	4618      	mov	r0, r3
 8002620:	4611      	mov	r1, r2
 8002622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	f04f 0000 	mov.w	r0, #0
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	0159      	lsls	r1, r3, #5
 800263e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002642:	0150      	lsls	r0, r2, #5
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4641      	mov	r1, r8
 800264a:	ebb2 0a01 	subs.w	sl, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb63 0b01 	sbc.w	fp, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002668:	ebb2 040a 	subs.w	r4, r2, sl
 800266c:	eb63 050b 	sbc.w	r5, r3, fp
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	00eb      	lsls	r3, r5, #3
 800267a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	4614      	mov	r4, r2
 8002682:	461d      	mov	r5, r3
 8002684:	4643      	mov	r3, r8
 8002686:	18e3      	adds	r3, r4, r3
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	464b      	mov	r3, r9
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269e:	4629      	mov	r1, r5
 80026a0:	028b      	lsls	r3, r1, #10
 80026a2:	4621      	mov	r1, r4
 80026a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a8:	4621      	mov	r1, r4
 80026aa:	028a      	lsls	r2, r1, #10
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b2:	2200      	movs	r2, #0
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	61fa      	str	r2, [r7, #28]
 80026b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026bc:	f7fd fde8 	bl	8000290 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4613      	mov	r3, r2
 80026c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x204>)
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3750      	adds	r7, #80	@ 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff0 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	08003e94 	.word	0x08003e94

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffdc 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0b5b      	lsrs	r3, r3, #13
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08003e94 	.word	0x08003e94

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe feac 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fa16 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01b      	beq.n	800286e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0202 	mvn.w	r2, #2
 800283e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f9a3 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 800285a:	e005      	b.n	8002868 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f995 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9a6 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01b      	beq.n	80028ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0204 	mvn.w	r2, #4
 800288a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f97d 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 80028a6:	e005      	b.n	80028b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f96f 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f980 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01b      	beq.n	8002906 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f06f 0208 	mvn.w	r2, #8
 80028d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2204      	movs	r2, #4
 80028dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f957 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 80028f2:	e005      	b.n	8002900 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f949 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f95a 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01b      	beq.n	8002952 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f06f 0210 	mvn.w	r2, #16
 8002922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2208      	movs	r2, #8
 8002928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f931 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 800293e:	e005      	b.n	800294c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f923 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f934 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0201 	mvn.w	r2, #1
 800296e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f901 	bl	8002b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fabf 	bl	8002f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f905 	bl	8002bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0220 	mvn.w	r2, #32
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa91 	bl	8002f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_ConfigClockSource+0x1c>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0b4      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x186>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3e:	d03e      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0xd4>
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a44:	f200 8087 	bhi.w	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4c:	f000 8086 	beq.w	8002b5c <HAL_TIM_ConfigClockSource+0x172>
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a54:	d87f      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a56:	2b70      	cmp	r3, #112	@ 0x70
 8002a58:	d01a      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0xa6>
 8002a5a:	2b70      	cmp	r3, #112	@ 0x70
 8002a5c:	d87b      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5e:	2b60      	cmp	r3, #96	@ 0x60
 8002a60:	d050      	beq.n	8002b04 <HAL_TIM_ConfigClockSource+0x11a>
 8002a62:	2b60      	cmp	r3, #96	@ 0x60
 8002a64:	d877      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a66:	2b50      	cmp	r3, #80	@ 0x50
 8002a68:	d03c      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0xfa>
 8002a6a:	2b50      	cmp	r3, #80	@ 0x50
 8002a6c:	d873      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d058      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x13a>
 8002a72:	2b40      	cmp	r3, #64	@ 0x40
 8002a74:	d86f      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a76:	2b30      	cmp	r3, #48	@ 0x30
 8002a78:	d064      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x15a>
 8002a7a:	2b30      	cmp	r3, #48	@ 0x30
 8002a7c:	d86b      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d060      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x15a>
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d867      	bhi.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d05c      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x15a>
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d05a      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0x15a>
 8002a8e:	e062      	b.n	8002b56 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aa0:	f000 f9a2 	bl	8002de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ab2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]
      break;
 8002abc:	e04f      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ace:	f000 f98b 	bl	8002de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae0:	609a      	str	r2, [r3, #8]
      break;
 8002ae2:	e03c      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af0:	461a      	mov	r2, r3
 8002af2:	f000 f8ff 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2150      	movs	r1, #80	@ 0x50
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f958 	bl	8002db2 <TIM_ITRx_SetConfig>
      break;
 8002b02:	e02c      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b10:	461a      	mov	r2, r3
 8002b12:	f000 f91e 	bl	8002d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2160      	movs	r1, #96	@ 0x60
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f948 	bl	8002db2 <TIM_ITRx_SetConfig>
      break;
 8002b22:	e01c      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b30:	461a      	mov	r2, r3
 8002b32:	f000 f8df 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2140      	movs	r1, #64	@ 0x40
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f938 	bl	8002db2 <TIM_ITRx_SetConfig>
      break;
 8002b42:	e00c      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f000 f92f 	bl	8002db2 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5a:	e000      	b.n	8002b5e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd8 <TIM_Base_SetConfig+0xfc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00f      	beq.n	8002c14 <TIM_Base_SetConfig+0x38>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfa:	d00b      	beq.n	8002c14 <TIM_Base_SetConfig+0x38>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a37      	ldr	r2, [pc, #220]	@ (8002cdc <TIM_Base_SetConfig+0x100>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <TIM_Base_SetConfig+0x38>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a36      	ldr	r2, [pc, #216]	@ (8002ce0 <TIM_Base_SetConfig+0x104>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_Base_SetConfig+0x38>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ce4 <TIM_Base_SetConfig+0x108>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <TIM_Base_SetConfig+0xfc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01b      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c34:	d017      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a28      	ldr	r2, [pc, #160]	@ (8002cdc <TIM_Base_SetConfig+0x100>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <TIM_Base_SetConfig+0x104>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00f      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a26      	ldr	r2, [pc, #152]	@ (8002ce4 <TIM_Base_SetConfig+0x108>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a25      	ldr	r2, [pc, #148]	@ (8002ce8 <TIM_Base_SetConfig+0x10c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a24      	ldr	r2, [pc, #144]	@ (8002cec <TIM_Base_SetConfig+0x110>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0x8a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd8 <TIM_Base_SetConfig+0xfc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40014000 	.word	0x40014000
 8002cec:	40014400 	.word	0x40014400
 8002cf0:	40014800 	.word	0x40014800

08002cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 030a 	bic.w	r3, r3, #10
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f023 0210 	bic.w	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	031b      	lsls	r3, r3, #12
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f043 0307 	orr.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e050      	b.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d018      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8c:	d013      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40014000 	.word	0x40014000

08002f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e042      	b.n	8002fc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe faf4 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f82b 	bl	8002fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b0c0      	sub	sp, #256	@ 0x100
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	ea40 0301 	orr.w	r3, r0, r1
 8002ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	431a      	orrs	r2, r3
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	431a      	orrs	r2, r3
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003024:	f021 010c 	bic.w	r1, r1, #12
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003032:	430b      	orrs	r3, r1
 8003034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003046:	6999      	ldr	r1, [r3, #24]
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	ea40 0301 	orr.w	r3, r0, r1
 8003052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b8f      	ldr	r3, [pc, #572]	@ (8003298 <UART_SetConfig+0x2cc>)
 800305c:	429a      	cmp	r2, r3
 800305e:	d005      	beq.n	800306c <UART_SetConfig+0xa0>
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b8d      	ldr	r3, [pc, #564]	@ (800329c <UART_SetConfig+0x2d0>)
 8003068:	429a      	cmp	r2, r3
 800306a:	d104      	bne.n	8003076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7ff fb6a 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003070:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003074:	e003      	b.n	800307e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003076:	f7ff fb51 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 800307a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003088:	f040 810c 	bne.w	80032a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800308c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003096:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800309a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	1891      	adds	r1, r2, r2
 80030a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030a6:	415b      	adcs	r3, r3
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ae:	4621      	mov	r1, r4
 80030b0:	eb12 0801 	adds.w	r8, r2, r1
 80030b4:	4629      	mov	r1, r5
 80030b6:	eb43 0901 	adc.w	r9, r3, r1
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ce:	4690      	mov	r8, r2
 80030d0:	4699      	mov	r9, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	eb18 0303 	adds.w	r3, r8, r3
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030dc:	462b      	mov	r3, r5
 80030de:	eb49 0303 	adc.w	r3, r9, r3
 80030e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030fa:	460b      	mov	r3, r1
 80030fc:	18db      	adds	r3, r3, r3
 80030fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003100:	4613      	mov	r3, r2
 8003102:	eb42 0303 	adc.w	r3, r2, r3
 8003106:	657b      	str	r3, [r7, #84]	@ 0x54
 8003108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800310c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003110:	f7fd f8be 	bl	8000290 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4b61      	ldr	r3, [pc, #388]	@ (80032a0 <UART_SetConfig+0x2d4>)
 800311a:	fba3 2302 	umull	r2, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	011c      	lsls	r4, r3, #4
 8003122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800312c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003134:	4642      	mov	r2, r8
 8003136:	464b      	mov	r3, r9
 8003138:	1891      	adds	r1, r2, r2
 800313a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800313c:	415b      	adcs	r3, r3
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003144:	4641      	mov	r1, r8
 8003146:	eb12 0a01 	adds.w	sl, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb43 0b01 	adc.w	fp, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800315c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003164:	4692      	mov	sl, r2
 8003166:	469b      	mov	fp, r3
 8003168:	4643      	mov	r3, r8
 800316a:	eb1a 0303 	adds.w	r3, sl, r3
 800316e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003172:	464b      	mov	r3, r9
 8003174:	eb4b 0303 	adc.w	r3, fp, r3
 8003178:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003188:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800318c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003190:	460b      	mov	r3, r1
 8003192:	18db      	adds	r3, r3, r3
 8003194:	643b      	str	r3, [r7, #64]	@ 0x40
 8003196:	4613      	mov	r3, r2
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	647b      	str	r3, [r7, #68]	@ 0x44
 800319e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031a6:	f7fd f873 	bl	8000290 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <UART_SetConfig+0x2d4>)
 80031b2:	fba3 2301 	umull	r2, r3, r3, r1
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2264      	movs	r2, #100	@ 0x64
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	1acb      	subs	r3, r1, r3
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031c6:	4b36      	ldr	r3, [pc, #216]	@ (80032a0 <UART_SetConfig+0x2d4>)
 80031c8:	fba3 2302 	umull	r2, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031d4:	441c      	add	r4, r3
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031f0:	415b      	adcs	r3, r3
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	637b      	str	r3, [r7, #52]	@ 0x34
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4651      	mov	r1, sl
 8003216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003244:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800324c:	460b      	mov	r3, r1
 800324e:	18db      	adds	r3, r3, r3
 8003250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003252:	4613      	mov	r3, r2
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800325a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800325e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003262:	f7fd f815 	bl	8000290 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <UART_SetConfig+0x2d4>)
 800326c:	fba3 1302 	umull	r1, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	2164      	movs	r1, #100	@ 0x64
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	3332      	adds	r3, #50	@ 0x32
 800327e:	4a08      	ldr	r2, [pc, #32]	@ (80032a0 <UART_SetConfig+0x2d4>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	f003 0207 	and.w	r2, r3, #7
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4422      	add	r2, r4
 8003292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003294:	e106      	b.n	80034a4 <UART_SetConfig+0x4d8>
 8003296:	bf00      	nop
 8003298:	40011000 	.word	0x40011000
 800329c:	40011400 	.word	0x40011400
 80032a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032b6:	4642      	mov	r2, r8
 80032b8:	464b      	mov	r3, r9
 80032ba:	1891      	adds	r1, r2, r2
 80032bc:	6239      	str	r1, [r7, #32]
 80032be:	415b      	adcs	r3, r3
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c6:	4641      	mov	r1, r8
 80032c8:	1854      	adds	r4, r2, r1
 80032ca:	4649      	mov	r1, r9
 80032cc:	eb43 0501 	adc.w	r5, r3, r1
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	00eb      	lsls	r3, r5, #3
 80032da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032de:	00e2      	lsls	r2, r4, #3
 80032e0:	4614      	mov	r4, r2
 80032e2:	461d      	mov	r5, r3
 80032e4:	4643      	mov	r3, r8
 80032e6:	18e3      	adds	r3, r4, r3
 80032e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032ec:	464b      	mov	r3, r9
 80032ee:	eb45 0303 	adc.w	r3, r5, r3
 80032f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003312:	4629      	mov	r1, r5
 8003314:	008b      	lsls	r3, r1, #2
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331c:	4621      	mov	r1, r4
 800331e:	008a      	lsls	r2, r1, #2
 8003320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003324:	f7fc ffb4 	bl	8000290 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4b60      	ldr	r3, [pc, #384]	@ (80034b0 <UART_SetConfig+0x4e4>)
 800332e:	fba3 2302 	umull	r2, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	011c      	lsls	r4, r3, #4
 8003336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003348:	4642      	mov	r2, r8
 800334a:	464b      	mov	r3, r9
 800334c:	1891      	adds	r1, r2, r2
 800334e:	61b9      	str	r1, [r7, #24]
 8003350:	415b      	adcs	r3, r3
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003358:	4641      	mov	r1, r8
 800335a:	1851      	adds	r1, r2, r1
 800335c:	6139      	str	r1, [r7, #16]
 800335e:	4649      	mov	r1, r9
 8003360:	414b      	adcs	r3, r1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003370:	4659      	mov	r1, fp
 8003372:	00cb      	lsls	r3, r1, #3
 8003374:	4651      	mov	r1, sl
 8003376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800337a:	4651      	mov	r1, sl
 800337c:	00ca      	lsls	r2, r1, #3
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	4603      	mov	r3, r0
 8003384:	4642      	mov	r2, r8
 8003386:	189b      	adds	r3, r3, r2
 8003388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800338c:	464b      	mov	r3, r9
 800338e:	460a      	mov	r2, r1
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033b0:	4649      	mov	r1, r9
 80033b2:	008b      	lsls	r3, r1, #2
 80033b4:	4641      	mov	r1, r8
 80033b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ba:	4641      	mov	r1, r8
 80033bc:	008a      	lsls	r2, r1, #2
 80033be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033c2:	f7fc ff65 	bl	8000290 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	4b38      	ldr	r3, [pc, #224]	@ (80034b0 <UART_SetConfig+0x4e4>)
 80033ce:	fba3 2301 	umull	r2, r3, r3, r1
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2264      	movs	r2, #100	@ 0x64
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	1acb      	subs	r3, r1, r3
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	3332      	adds	r3, #50	@ 0x32
 80033e0:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <UART_SetConfig+0x4e4>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ec:	441c      	add	r4, r3
 80033ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f2:	2200      	movs	r2, #0
 80033f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033fc:	4642      	mov	r2, r8
 80033fe:	464b      	mov	r3, r9
 8003400:	1891      	adds	r1, r2, r2
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	415b      	adcs	r3, r3
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800340c:	4641      	mov	r1, r8
 800340e:	1851      	adds	r1, r2, r1
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	4649      	mov	r1, r9
 8003414:	414b      	adcs	r3, r1
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003424:	4659      	mov	r1, fp
 8003426:	00cb      	lsls	r3, r1, #3
 8003428:	4651      	mov	r1, sl
 800342a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800342e:	4651      	mov	r1, sl
 8003430:	00ca      	lsls	r2, r1, #3
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	4603      	mov	r3, r0
 8003438:	4642      	mov	r2, r8
 800343a:	189b      	adds	r3, r3, r2
 800343c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800343e:	464b      	mov	r3, r9
 8003440:	460a      	mov	r2, r1
 8003442:	eb42 0303 	adc.w	r3, r2, r3
 8003446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	663b      	str	r3, [r7, #96]	@ 0x60
 8003452:	667a      	str	r2, [r7, #100]	@ 0x64
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003460:	4649      	mov	r1, r9
 8003462:	008b      	lsls	r3, r1, #2
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800346a:	4641      	mov	r1, r8
 800346c:	008a      	lsls	r2, r1, #2
 800346e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003472:	f7fc ff0d 	bl	8000290 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <UART_SetConfig+0x4e4>)
 800347c:	fba3 1302 	umull	r1, r3, r3, r2
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	2164      	movs	r1, #100	@ 0x64
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	3332      	adds	r3, #50	@ 0x32
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <UART_SetConfig+0x4e4>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4422      	add	r2, r4
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034aa:	46bd      	mov	sp, r7
 80034ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <siprintf>:
 80034b4:	b40e      	push	{r1, r2, r3}
 80034b6:	b500      	push	{lr}
 80034b8:	b09c      	sub	sp, #112	@ 0x70
 80034ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80034bc:	9002      	str	r0, [sp, #8]
 80034be:	9006      	str	r0, [sp, #24]
 80034c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80034c4:	4809      	ldr	r0, [pc, #36]	@ (80034ec <siprintf+0x38>)
 80034c6:	9107      	str	r1, [sp, #28]
 80034c8:	9104      	str	r1, [sp, #16]
 80034ca:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <siprintf+0x3c>)
 80034cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	6800      	ldr	r0, [r0, #0]
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	a902      	add	r1, sp, #8
 80034d8:	f000 f994 	bl	8003804 <_svfiprintf_r>
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	b01c      	add	sp, #112	@ 0x70
 80034e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034e8:	b003      	add	sp, #12
 80034ea:	4770      	bx	lr
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	ffff0208 	.word	0xffff0208

080034f4 <memset>:
 80034f4:	4402      	add	r2, r0
 80034f6:	4603      	mov	r3, r0
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d100      	bne.n	80034fe <memset+0xa>
 80034fc:	4770      	bx	lr
 80034fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003502:	e7f9      	b.n	80034f8 <memset+0x4>

08003504 <__errno>:
 8003504:	4b01      	ldr	r3, [pc, #4]	@ (800350c <__errno+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	2000000c 	.word	0x2000000c

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4d0d      	ldr	r5, [pc, #52]	@ (8003548 <__libc_init_array+0x38>)
 8003514:	4c0d      	ldr	r4, [pc, #52]	@ (800354c <__libc_init_array+0x3c>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2600      	movs	r6, #0
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	4d0b      	ldr	r5, [pc, #44]	@ (8003550 <__libc_init_array+0x40>)
 8003522:	4c0c      	ldr	r4, [pc, #48]	@ (8003554 <__libc_init_array+0x44>)
 8003524:	f000 fc66 	bl	8003df4 <_init>
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	2600      	movs	r6, #0
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	08003ed8 	.word	0x08003ed8
 800354c:	08003ed8 	.word	0x08003ed8
 8003550:	08003ed8 	.word	0x08003ed8
 8003554:	08003edc 	.word	0x08003edc

08003558 <__retarget_lock_acquire_recursive>:
 8003558:	4770      	bx	lr

0800355a <__retarget_lock_release_recursive>:
 800355a:	4770      	bx	lr

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d041      	beq.n	80035e8 <_free_r+0x8c>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f8e0 	bl	8003734 <__malloc_lock>
 8003574:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <_free_r+0x90>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	b933      	cbnz	r3, 8003588 <_free_r+0x2c>
 800357a:	6063      	str	r3, [r4, #4]
 800357c:	6014      	str	r4, [r2, #0]
 800357e:	4628      	mov	r0, r5
 8003580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003584:	f000 b8dc 	b.w	8003740 <__malloc_unlock>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d908      	bls.n	800359e <_free_r+0x42>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	1821      	adds	r1, r4, r0
 8003590:	428b      	cmp	r3, r1
 8003592:	bf01      	itttt	eq
 8003594:	6819      	ldreq	r1, [r3, #0]
 8003596:	685b      	ldreq	r3, [r3, #4]
 8003598:	1809      	addeq	r1, r1, r0
 800359a:	6021      	streq	r1, [r4, #0]
 800359c:	e7ed      	b.n	800357a <_free_r+0x1e>
 800359e:	461a      	mov	r2, r3
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	b10b      	cbz	r3, 80035a8 <_free_r+0x4c>
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	d9fa      	bls.n	800359e <_free_r+0x42>
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	1850      	adds	r0, r2, r1
 80035ac:	42a0      	cmp	r0, r4
 80035ae:	d10b      	bne.n	80035c8 <_free_r+0x6c>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	4401      	add	r1, r0
 80035b4:	1850      	adds	r0, r2, r1
 80035b6:	4283      	cmp	r3, r0
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	d1e0      	bne.n	800357e <_free_r+0x22>
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	6053      	str	r3, [r2, #4]
 80035c2:	4408      	add	r0, r1
 80035c4:	6010      	str	r0, [r2, #0]
 80035c6:	e7da      	b.n	800357e <_free_r+0x22>
 80035c8:	d902      	bls.n	80035d0 <_free_r+0x74>
 80035ca:	230c      	movs	r3, #12
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	e7d6      	b.n	800357e <_free_r+0x22>
 80035d0:	6820      	ldr	r0, [r4, #0]
 80035d2:	1821      	adds	r1, r4, r0
 80035d4:	428b      	cmp	r3, r1
 80035d6:	bf04      	itt	eq
 80035d8:	6819      	ldreq	r1, [r3, #0]
 80035da:	685b      	ldreq	r3, [r3, #4]
 80035dc:	6063      	str	r3, [r4, #4]
 80035de:	bf04      	itt	eq
 80035e0:	1809      	addeq	r1, r1, r0
 80035e2:	6021      	streq	r1, [r4, #0]
 80035e4:	6054      	str	r4, [r2, #4]
 80035e6:	e7ca      	b.n	800357e <_free_r+0x22>
 80035e8:	bd38      	pop	{r3, r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	20000308 	.word	0x20000308

080035f0 <sbrk_aligned>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003630 <sbrk_aligned+0x40>)
 80035f4:	460c      	mov	r4, r1
 80035f6:	6831      	ldr	r1, [r6, #0]
 80035f8:	4605      	mov	r5, r0
 80035fa:	b911      	cbnz	r1, 8003602 <sbrk_aligned+0x12>
 80035fc:	f000 fba6 	bl	8003d4c <_sbrk_r>
 8003600:	6030      	str	r0, [r6, #0]
 8003602:	4621      	mov	r1, r4
 8003604:	4628      	mov	r0, r5
 8003606:	f000 fba1 	bl	8003d4c <_sbrk_r>
 800360a:	1c43      	adds	r3, r0, #1
 800360c:	d103      	bne.n	8003616 <sbrk_aligned+0x26>
 800360e:	f04f 34ff 	mov.w	r4, #4294967295
 8003612:	4620      	mov	r0, r4
 8003614:	bd70      	pop	{r4, r5, r6, pc}
 8003616:	1cc4      	adds	r4, r0, #3
 8003618:	f024 0403 	bic.w	r4, r4, #3
 800361c:	42a0      	cmp	r0, r4
 800361e:	d0f8      	beq.n	8003612 <sbrk_aligned+0x22>
 8003620:	1a21      	subs	r1, r4, r0
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fb92 	bl	8003d4c <_sbrk_r>
 8003628:	3001      	adds	r0, #1
 800362a:	d1f2      	bne.n	8003612 <sbrk_aligned+0x22>
 800362c:	e7ef      	b.n	800360e <sbrk_aligned+0x1e>
 800362e:	bf00      	nop
 8003630:	20000304 	.word	0x20000304

08003634 <_malloc_r>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	1ccd      	adds	r5, r1, #3
 800363a:	f025 0503 	bic.w	r5, r5, #3
 800363e:	3508      	adds	r5, #8
 8003640:	2d0c      	cmp	r5, #12
 8003642:	bf38      	it	cc
 8003644:	250c      	movcc	r5, #12
 8003646:	2d00      	cmp	r5, #0
 8003648:	4606      	mov	r6, r0
 800364a:	db01      	blt.n	8003650 <_malloc_r+0x1c>
 800364c:	42a9      	cmp	r1, r5
 800364e:	d904      	bls.n	800365a <_malloc_r+0x26>
 8003650:	230c      	movs	r3, #12
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	2000      	movs	r0, #0
 8003656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800365a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003730 <_malloc_r+0xfc>
 800365e:	f000 f869 	bl	8003734 <__malloc_lock>
 8003662:	f8d8 3000 	ldr.w	r3, [r8]
 8003666:	461c      	mov	r4, r3
 8003668:	bb44      	cbnz	r4, 80036bc <_malloc_r+0x88>
 800366a:	4629      	mov	r1, r5
 800366c:	4630      	mov	r0, r6
 800366e:	f7ff ffbf 	bl	80035f0 <sbrk_aligned>
 8003672:	1c43      	adds	r3, r0, #1
 8003674:	4604      	mov	r4, r0
 8003676:	d158      	bne.n	800372a <_malloc_r+0xf6>
 8003678:	f8d8 4000 	ldr.w	r4, [r8]
 800367c:	4627      	mov	r7, r4
 800367e:	2f00      	cmp	r7, #0
 8003680:	d143      	bne.n	800370a <_malloc_r+0xd6>
 8003682:	2c00      	cmp	r4, #0
 8003684:	d04b      	beq.n	800371e <_malloc_r+0xea>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	4639      	mov	r1, r7
 800368a:	4630      	mov	r0, r6
 800368c:	eb04 0903 	add.w	r9, r4, r3
 8003690:	f000 fb5c 	bl	8003d4c <_sbrk_r>
 8003694:	4581      	cmp	r9, r0
 8003696:	d142      	bne.n	800371e <_malloc_r+0xea>
 8003698:	6821      	ldr	r1, [r4, #0]
 800369a:	1a6d      	subs	r5, r5, r1
 800369c:	4629      	mov	r1, r5
 800369e:	4630      	mov	r0, r6
 80036a0:	f7ff ffa6 	bl	80035f0 <sbrk_aligned>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d03a      	beq.n	800371e <_malloc_r+0xea>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	442b      	add	r3, r5
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	f8d8 3000 	ldr.w	r3, [r8]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	bb62      	cbnz	r2, 8003710 <_malloc_r+0xdc>
 80036b6:	f8c8 7000 	str.w	r7, [r8]
 80036ba:	e00f      	b.n	80036dc <_malloc_r+0xa8>
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	1b52      	subs	r2, r2, r5
 80036c0:	d420      	bmi.n	8003704 <_malloc_r+0xd0>
 80036c2:	2a0b      	cmp	r2, #11
 80036c4:	d917      	bls.n	80036f6 <_malloc_r+0xc2>
 80036c6:	1961      	adds	r1, r4, r5
 80036c8:	42a3      	cmp	r3, r4
 80036ca:	6025      	str	r5, [r4, #0]
 80036cc:	bf18      	it	ne
 80036ce:	6059      	strne	r1, [r3, #4]
 80036d0:	6863      	ldr	r3, [r4, #4]
 80036d2:	bf08      	it	eq
 80036d4:	f8c8 1000 	streq.w	r1, [r8]
 80036d8:	5162      	str	r2, [r4, r5]
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	4630      	mov	r0, r6
 80036de:	f000 f82f 	bl	8003740 <__malloc_unlock>
 80036e2:	f104 000b 	add.w	r0, r4, #11
 80036e6:	1d23      	adds	r3, r4, #4
 80036e8:	f020 0007 	bic.w	r0, r0, #7
 80036ec:	1ac2      	subs	r2, r0, r3
 80036ee:	bf1c      	itt	ne
 80036f0:	1a1b      	subne	r3, r3, r0
 80036f2:	50a3      	strne	r3, [r4, r2]
 80036f4:	e7af      	b.n	8003656 <_malloc_r+0x22>
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	bf0c      	ite	eq
 80036fc:	f8c8 2000 	streq.w	r2, [r8]
 8003700:	605a      	strne	r2, [r3, #4]
 8003702:	e7eb      	b.n	80036dc <_malloc_r+0xa8>
 8003704:	4623      	mov	r3, r4
 8003706:	6864      	ldr	r4, [r4, #4]
 8003708:	e7ae      	b.n	8003668 <_malloc_r+0x34>
 800370a:	463c      	mov	r4, r7
 800370c:	687f      	ldr	r7, [r7, #4]
 800370e:	e7b6      	b.n	800367e <_malloc_r+0x4a>
 8003710:	461a      	mov	r2, r3
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	42a3      	cmp	r3, r4
 8003716:	d1fb      	bne.n	8003710 <_malloc_r+0xdc>
 8003718:	2300      	movs	r3, #0
 800371a:	6053      	str	r3, [r2, #4]
 800371c:	e7de      	b.n	80036dc <_malloc_r+0xa8>
 800371e:	230c      	movs	r3, #12
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	4630      	mov	r0, r6
 8003724:	f000 f80c 	bl	8003740 <__malloc_unlock>
 8003728:	e794      	b.n	8003654 <_malloc_r+0x20>
 800372a:	6005      	str	r5, [r0, #0]
 800372c:	e7d6      	b.n	80036dc <_malloc_r+0xa8>
 800372e:	bf00      	nop
 8003730:	20000308 	.word	0x20000308

08003734 <__malloc_lock>:
 8003734:	4801      	ldr	r0, [pc, #4]	@ (800373c <__malloc_lock+0x8>)
 8003736:	f7ff bf0f 	b.w	8003558 <__retarget_lock_acquire_recursive>
 800373a:	bf00      	nop
 800373c:	20000300 	.word	0x20000300

08003740 <__malloc_unlock>:
 8003740:	4801      	ldr	r0, [pc, #4]	@ (8003748 <__malloc_unlock+0x8>)
 8003742:	f7ff bf0a 	b.w	800355a <__retarget_lock_release_recursive>
 8003746:	bf00      	nop
 8003748:	20000300 	.word	0x20000300

0800374c <__ssputs_r>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	688e      	ldr	r6, [r1, #8]
 8003752:	461f      	mov	r7, r3
 8003754:	42be      	cmp	r6, r7
 8003756:	680b      	ldr	r3, [r1, #0]
 8003758:	4682      	mov	sl, r0
 800375a:	460c      	mov	r4, r1
 800375c:	4690      	mov	r8, r2
 800375e:	d82d      	bhi.n	80037bc <__ssputs_r+0x70>
 8003760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003768:	d026      	beq.n	80037b8 <__ssputs_r+0x6c>
 800376a:	6965      	ldr	r5, [r4, #20]
 800376c:	6909      	ldr	r1, [r1, #16]
 800376e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003772:	eba3 0901 	sub.w	r9, r3, r1
 8003776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800377a:	1c7b      	adds	r3, r7, #1
 800377c:	444b      	add	r3, r9
 800377e:	106d      	asrs	r5, r5, #1
 8003780:	429d      	cmp	r5, r3
 8003782:	bf38      	it	cc
 8003784:	461d      	movcc	r5, r3
 8003786:	0553      	lsls	r3, r2, #21
 8003788:	d527      	bpl.n	80037da <__ssputs_r+0x8e>
 800378a:	4629      	mov	r1, r5
 800378c:	f7ff ff52 	bl	8003634 <_malloc_r>
 8003790:	4606      	mov	r6, r0
 8003792:	b360      	cbz	r0, 80037ee <__ssputs_r+0xa2>
 8003794:	6921      	ldr	r1, [r4, #16]
 8003796:	464a      	mov	r2, r9
 8003798:	f000 fae8 	bl	8003d6c <memcpy>
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	6126      	str	r6, [r4, #16]
 80037aa:	6165      	str	r5, [r4, #20]
 80037ac:	444e      	add	r6, r9
 80037ae:	eba5 0509 	sub.w	r5, r5, r9
 80037b2:	6026      	str	r6, [r4, #0]
 80037b4:	60a5      	str	r5, [r4, #8]
 80037b6:	463e      	mov	r6, r7
 80037b8:	42be      	cmp	r6, r7
 80037ba:	d900      	bls.n	80037be <__ssputs_r+0x72>
 80037bc:	463e      	mov	r6, r7
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	4632      	mov	r2, r6
 80037c2:	4641      	mov	r1, r8
 80037c4:	f000 faa8 	bl	8003d18 <memmove>
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	1b9b      	subs	r3, r3, r6
 80037cc:	60a3      	str	r3, [r4, #8]
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	4433      	add	r3, r6
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	2000      	movs	r0, #0
 80037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037da:	462a      	mov	r2, r5
 80037dc:	f000 fad4 	bl	8003d88 <_realloc_r>
 80037e0:	4606      	mov	r6, r0
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1e0      	bne.n	80037a8 <__ssputs_r+0x5c>
 80037e6:	6921      	ldr	r1, [r4, #16]
 80037e8:	4650      	mov	r0, sl
 80037ea:	f7ff feb7 	bl	800355c <_free_r>
 80037ee:	230c      	movs	r3, #12
 80037f0:	f8ca 3000 	str.w	r3, [sl]
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003800:	e7e9      	b.n	80037d6 <__ssputs_r+0x8a>
	...

08003804 <_svfiprintf_r>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	4698      	mov	r8, r3
 800380a:	898b      	ldrh	r3, [r1, #12]
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	b09d      	sub	sp, #116	@ 0x74
 8003810:	4607      	mov	r7, r0
 8003812:	460d      	mov	r5, r1
 8003814:	4614      	mov	r4, r2
 8003816:	d510      	bpl.n	800383a <_svfiprintf_r+0x36>
 8003818:	690b      	ldr	r3, [r1, #16]
 800381a:	b973      	cbnz	r3, 800383a <_svfiprintf_r+0x36>
 800381c:	2140      	movs	r1, #64	@ 0x40
 800381e:	f7ff ff09 	bl	8003634 <_malloc_r>
 8003822:	6028      	str	r0, [r5, #0]
 8003824:	6128      	str	r0, [r5, #16]
 8003826:	b930      	cbnz	r0, 8003836 <_svfiprintf_r+0x32>
 8003828:	230c      	movs	r3, #12
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	b01d      	add	sp, #116	@ 0x74
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	2340      	movs	r3, #64	@ 0x40
 8003838:	616b      	str	r3, [r5, #20]
 800383a:	2300      	movs	r3, #0
 800383c:	9309      	str	r3, [sp, #36]	@ 0x24
 800383e:	2320      	movs	r3, #32
 8003840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003844:	f8cd 800c 	str.w	r8, [sp, #12]
 8003848:	2330      	movs	r3, #48	@ 0x30
 800384a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80039e8 <_svfiprintf_r+0x1e4>
 800384e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003852:	f04f 0901 	mov.w	r9, #1
 8003856:	4623      	mov	r3, r4
 8003858:	469a      	mov	sl, r3
 800385a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800385e:	b10a      	cbz	r2, 8003864 <_svfiprintf_r+0x60>
 8003860:	2a25      	cmp	r2, #37	@ 0x25
 8003862:	d1f9      	bne.n	8003858 <_svfiprintf_r+0x54>
 8003864:	ebba 0b04 	subs.w	fp, sl, r4
 8003868:	d00b      	beq.n	8003882 <_svfiprintf_r+0x7e>
 800386a:	465b      	mov	r3, fp
 800386c:	4622      	mov	r2, r4
 800386e:	4629      	mov	r1, r5
 8003870:	4638      	mov	r0, r7
 8003872:	f7ff ff6b 	bl	800374c <__ssputs_r>
 8003876:	3001      	adds	r0, #1
 8003878:	f000 80a7 	beq.w	80039ca <_svfiprintf_r+0x1c6>
 800387c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800387e:	445a      	add	r2, fp
 8003880:	9209      	str	r2, [sp, #36]	@ 0x24
 8003882:	f89a 3000 	ldrb.w	r3, [sl]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 809f 	beq.w	80039ca <_svfiprintf_r+0x1c6>
 800388c:	2300      	movs	r3, #0
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003896:	f10a 0a01 	add.w	sl, sl, #1
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	9307      	str	r3, [sp, #28]
 800389e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80038a4:	4654      	mov	r4, sl
 80038a6:	2205      	movs	r2, #5
 80038a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ac:	484e      	ldr	r0, [pc, #312]	@ (80039e8 <_svfiprintf_r+0x1e4>)
 80038ae:	f7fc fc9f 	bl	80001f0 <memchr>
 80038b2:	9a04      	ldr	r2, [sp, #16]
 80038b4:	b9d8      	cbnz	r0, 80038ee <_svfiprintf_r+0xea>
 80038b6:	06d0      	lsls	r0, r2, #27
 80038b8:	bf44      	itt	mi
 80038ba:	2320      	movmi	r3, #32
 80038bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038c0:	0711      	lsls	r1, r2, #28
 80038c2:	bf44      	itt	mi
 80038c4:	232b      	movmi	r3, #43	@ 0x2b
 80038c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ca:	f89a 3000 	ldrb.w	r3, [sl]
 80038ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80038d0:	d015      	beq.n	80038fe <_svfiprintf_r+0xfa>
 80038d2:	9a07      	ldr	r2, [sp, #28]
 80038d4:	4654      	mov	r4, sl
 80038d6:	2000      	movs	r0, #0
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	4621      	mov	r1, r4
 80038de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e2:	3b30      	subs	r3, #48	@ 0x30
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d94b      	bls.n	8003980 <_svfiprintf_r+0x17c>
 80038e8:	b1b0      	cbz	r0, 8003918 <_svfiprintf_r+0x114>
 80038ea:	9207      	str	r2, [sp, #28]
 80038ec:	e014      	b.n	8003918 <_svfiprintf_r+0x114>
 80038ee:	eba0 0308 	sub.w	r3, r0, r8
 80038f2:	fa09 f303 	lsl.w	r3, r9, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	46a2      	mov	sl, r4
 80038fc:	e7d2      	b.n	80038a4 <_svfiprintf_r+0xa0>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	1d19      	adds	r1, r3, #4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	9103      	str	r1, [sp, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfbb      	ittet	lt
 800390a:	425b      	neglt	r3, r3
 800390c:	f042 0202 	orrlt.w	r2, r2, #2
 8003910:	9307      	strge	r3, [sp, #28]
 8003912:	9307      	strlt	r3, [sp, #28]
 8003914:	bfb8      	it	lt
 8003916:	9204      	strlt	r2, [sp, #16]
 8003918:	7823      	ldrb	r3, [r4, #0]
 800391a:	2b2e      	cmp	r3, #46	@ 0x2e
 800391c:	d10a      	bne.n	8003934 <_svfiprintf_r+0x130>
 800391e:	7863      	ldrb	r3, [r4, #1]
 8003920:	2b2a      	cmp	r3, #42	@ 0x2a
 8003922:	d132      	bne.n	800398a <_svfiprintf_r+0x186>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	9203      	str	r2, [sp, #12]
 800392c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003930:	3402      	adds	r4, #2
 8003932:	9305      	str	r3, [sp, #20]
 8003934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039f8 <_svfiprintf_r+0x1f4>
 8003938:	7821      	ldrb	r1, [r4, #0]
 800393a:	2203      	movs	r2, #3
 800393c:	4650      	mov	r0, sl
 800393e:	f7fc fc57 	bl	80001f0 <memchr>
 8003942:	b138      	cbz	r0, 8003954 <_svfiprintf_r+0x150>
 8003944:	9b04      	ldr	r3, [sp, #16]
 8003946:	eba0 000a 	sub.w	r0, r0, sl
 800394a:	2240      	movs	r2, #64	@ 0x40
 800394c:	4082      	lsls	r2, r0
 800394e:	4313      	orrs	r3, r2
 8003950:	3401      	adds	r4, #1
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003958:	4824      	ldr	r0, [pc, #144]	@ (80039ec <_svfiprintf_r+0x1e8>)
 800395a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800395e:	2206      	movs	r2, #6
 8003960:	f7fc fc46 	bl	80001f0 <memchr>
 8003964:	2800      	cmp	r0, #0
 8003966:	d036      	beq.n	80039d6 <_svfiprintf_r+0x1d2>
 8003968:	4b21      	ldr	r3, [pc, #132]	@ (80039f0 <_svfiprintf_r+0x1ec>)
 800396a:	bb1b      	cbnz	r3, 80039b4 <_svfiprintf_r+0x1b0>
 800396c:	9b03      	ldr	r3, [sp, #12]
 800396e:	3307      	adds	r3, #7
 8003970:	f023 0307 	bic.w	r3, r3, #7
 8003974:	3308      	adds	r3, #8
 8003976:	9303      	str	r3, [sp, #12]
 8003978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800397a:	4433      	add	r3, r6
 800397c:	9309      	str	r3, [sp, #36]	@ 0x24
 800397e:	e76a      	b.n	8003856 <_svfiprintf_r+0x52>
 8003980:	fb0c 3202 	mla	r2, ip, r2, r3
 8003984:	460c      	mov	r4, r1
 8003986:	2001      	movs	r0, #1
 8003988:	e7a8      	b.n	80038dc <_svfiprintf_r+0xd8>
 800398a:	2300      	movs	r3, #0
 800398c:	3401      	adds	r4, #1
 800398e:	9305      	str	r3, [sp, #20]
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 0c0a 	mov.w	ip, #10
 8003996:	4620      	mov	r0, r4
 8003998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800399c:	3a30      	subs	r2, #48	@ 0x30
 800399e:	2a09      	cmp	r2, #9
 80039a0:	d903      	bls.n	80039aa <_svfiprintf_r+0x1a6>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0c6      	beq.n	8003934 <_svfiprintf_r+0x130>
 80039a6:	9105      	str	r1, [sp, #20]
 80039a8:	e7c4      	b.n	8003934 <_svfiprintf_r+0x130>
 80039aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ae:	4604      	mov	r4, r0
 80039b0:	2301      	movs	r3, #1
 80039b2:	e7f0      	b.n	8003996 <_svfiprintf_r+0x192>
 80039b4:	ab03      	add	r3, sp, #12
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <_svfiprintf_r+0x1f0>)
 80039bc:	a904      	add	r1, sp, #16
 80039be:	4638      	mov	r0, r7
 80039c0:	f3af 8000 	nop.w
 80039c4:	1c42      	adds	r2, r0, #1
 80039c6:	4606      	mov	r6, r0
 80039c8:	d1d6      	bne.n	8003978 <_svfiprintf_r+0x174>
 80039ca:	89ab      	ldrh	r3, [r5, #12]
 80039cc:	065b      	lsls	r3, r3, #25
 80039ce:	f53f af2d 	bmi.w	800382c <_svfiprintf_r+0x28>
 80039d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039d4:	e72c      	b.n	8003830 <_svfiprintf_r+0x2c>
 80039d6:	ab03      	add	r3, sp, #12
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	462a      	mov	r2, r5
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <_svfiprintf_r+0x1f0>)
 80039de:	a904      	add	r1, sp, #16
 80039e0:	4638      	mov	r0, r7
 80039e2:	f000 f879 	bl	8003ad8 <_printf_i>
 80039e6:	e7ed      	b.n	80039c4 <_svfiprintf_r+0x1c0>
 80039e8:	08003e9c 	.word	0x08003e9c
 80039ec:	08003ea6 	.word	0x08003ea6
 80039f0:	00000000 	.word	0x00000000
 80039f4:	0800374d 	.word	0x0800374d
 80039f8:	08003ea2 	.word	0x08003ea2

080039fc <_printf_common>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	4616      	mov	r6, r2
 8003a02:	4698      	mov	r8, r3
 8003a04:	688a      	ldr	r2, [r1, #8]
 8003a06:	690b      	ldr	r3, [r1, #16]
 8003a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	bfb8      	it	lt
 8003a10:	4613      	movlt	r3, r2
 8003a12:	6033      	str	r3, [r6, #0]
 8003a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a18:	4607      	mov	r7, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	b10a      	cbz	r2, 8003a22 <_printf_common+0x26>
 8003a1e:	3301      	adds	r3, #1
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	0699      	lsls	r1, r3, #26
 8003a26:	bf42      	ittt	mi
 8003a28:	6833      	ldrmi	r3, [r6, #0]
 8003a2a:	3302      	addmi	r3, #2
 8003a2c:	6033      	strmi	r3, [r6, #0]
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	f015 0506 	ands.w	r5, r5, #6
 8003a34:	d106      	bne.n	8003a44 <_printf_common+0x48>
 8003a36:	f104 0a19 	add.w	sl, r4, #25
 8003a3a:	68e3      	ldr	r3, [r4, #12]
 8003a3c:	6832      	ldr	r2, [r6, #0]
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	dc26      	bgt.n	8003a92 <_printf_common+0x96>
 8003a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	3b00      	subs	r3, #0
 8003a4c:	bf18      	it	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	0692      	lsls	r2, r2, #26
 8003a52:	d42b      	bmi.n	8003aac <_printf_common+0xb0>
 8003a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a58:	4641      	mov	r1, r8
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c8      	blx	r9
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d01e      	beq.n	8003aa0 <_printf_common+0xa4>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	6922      	ldr	r2, [r4, #16]
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf02      	ittt	eq
 8003a6e:	68e5      	ldreq	r5, [r4, #12]
 8003a70:	6833      	ldreq	r3, [r6, #0]
 8003a72:	1aed      	subeq	r5, r5, r3
 8003a74:	68a3      	ldr	r3, [r4, #8]
 8003a76:	bf0c      	ite	eq
 8003a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a7c:	2500      	movne	r5, #0
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	bfc4      	itt	gt
 8003a82:	1a9b      	subgt	r3, r3, r2
 8003a84:	18ed      	addgt	r5, r5, r3
 8003a86:	2600      	movs	r6, #0
 8003a88:	341a      	adds	r4, #26
 8003a8a:	42b5      	cmp	r5, r6
 8003a8c:	d11a      	bne.n	8003ac4 <_printf_common+0xc8>
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e008      	b.n	8003aa4 <_printf_common+0xa8>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4652      	mov	r2, sl
 8003a96:	4641      	mov	r1, r8
 8003a98:	4638      	mov	r0, r7
 8003a9a:	47c8      	blx	r9
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d103      	bne.n	8003aa8 <_printf_common+0xac>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	3501      	adds	r5, #1
 8003aaa:	e7c6      	b.n	8003a3a <_printf_common+0x3e>
 8003aac:	18e1      	adds	r1, r4, r3
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	2030      	movs	r0, #48	@ 0x30
 8003ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ab6:	4422      	add	r2, r4
 8003ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	e7c7      	b.n	8003a54 <_printf_common+0x58>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	4641      	mov	r1, r8
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c8      	blx	r9
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d0e6      	beq.n	8003aa0 <_printf_common+0xa4>
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7d9      	b.n	8003a8a <_printf_common+0x8e>
	...

08003ad8 <_printf_i>:
 8003ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	7e0f      	ldrb	r7, [r1, #24]
 8003ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ae0:	2f78      	cmp	r7, #120	@ 0x78
 8003ae2:	4691      	mov	r9, r2
 8003ae4:	4680      	mov	r8, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	469a      	mov	sl, r3
 8003aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003aee:	d807      	bhi.n	8003b00 <_printf_i+0x28>
 8003af0:	2f62      	cmp	r7, #98	@ 0x62
 8003af2:	d80a      	bhi.n	8003b0a <_printf_i+0x32>
 8003af4:	2f00      	cmp	r7, #0
 8003af6:	f000 80d2 	beq.w	8003c9e <_printf_i+0x1c6>
 8003afa:	2f58      	cmp	r7, #88	@ 0x58
 8003afc:	f000 80b9 	beq.w	8003c72 <_printf_i+0x19a>
 8003b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b08:	e03a      	b.n	8003b80 <_printf_i+0xa8>
 8003b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b0e:	2b15      	cmp	r3, #21
 8003b10:	d8f6      	bhi.n	8003b00 <_printf_i+0x28>
 8003b12:	a101      	add	r1, pc, #4	@ (adr r1, 8003b18 <_printf_i+0x40>)
 8003b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b18:	08003b71 	.word	0x08003b71
 8003b1c:	08003b85 	.word	0x08003b85
 8003b20:	08003b01 	.word	0x08003b01
 8003b24:	08003b01 	.word	0x08003b01
 8003b28:	08003b01 	.word	0x08003b01
 8003b2c:	08003b01 	.word	0x08003b01
 8003b30:	08003b85 	.word	0x08003b85
 8003b34:	08003b01 	.word	0x08003b01
 8003b38:	08003b01 	.word	0x08003b01
 8003b3c:	08003b01 	.word	0x08003b01
 8003b40:	08003b01 	.word	0x08003b01
 8003b44:	08003c85 	.word	0x08003c85
 8003b48:	08003baf 	.word	0x08003baf
 8003b4c:	08003c3f 	.word	0x08003c3f
 8003b50:	08003b01 	.word	0x08003b01
 8003b54:	08003b01 	.word	0x08003b01
 8003b58:	08003ca7 	.word	0x08003ca7
 8003b5c:	08003b01 	.word	0x08003b01
 8003b60:	08003baf 	.word	0x08003baf
 8003b64:	08003b01 	.word	0x08003b01
 8003b68:	08003b01 	.word	0x08003b01
 8003b6c:	08003c47 	.word	0x08003c47
 8003b70:	6833      	ldr	r3, [r6, #0]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6032      	str	r2, [r6, #0]
 8003b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b80:	2301      	movs	r3, #1
 8003b82:	e09d      	b.n	8003cc0 <_printf_i+0x1e8>
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	1d19      	adds	r1, r3, #4
 8003b8a:	6031      	str	r1, [r6, #0]
 8003b8c:	0606      	lsls	r6, r0, #24
 8003b8e:	d501      	bpl.n	8003b94 <_printf_i+0xbc>
 8003b90:	681d      	ldr	r5, [r3, #0]
 8003b92:	e003      	b.n	8003b9c <_printf_i+0xc4>
 8003b94:	0645      	lsls	r5, r0, #25
 8003b96:	d5fb      	bpl.n	8003b90 <_printf_i+0xb8>
 8003b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	da03      	bge.n	8003ba8 <_printf_i+0xd0>
 8003ba0:	232d      	movs	r3, #45	@ 0x2d
 8003ba2:	426d      	negs	r5, r5
 8003ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ba8:	4859      	ldr	r0, [pc, #356]	@ (8003d10 <_printf_i+0x238>)
 8003baa:	230a      	movs	r3, #10
 8003bac:	e011      	b.n	8003bd2 <_printf_i+0xfa>
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	6833      	ldr	r3, [r6, #0]
 8003bb2:	0608      	lsls	r0, r1, #24
 8003bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bb8:	d402      	bmi.n	8003bc0 <_printf_i+0xe8>
 8003bba:	0649      	lsls	r1, r1, #25
 8003bbc:	bf48      	it	mi
 8003bbe:	b2ad      	uxthmi	r5, r5
 8003bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bc2:	4853      	ldr	r0, [pc, #332]	@ (8003d10 <_printf_i+0x238>)
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	bf14      	ite	ne
 8003bc8:	230a      	movne	r3, #10
 8003bca:	2308      	moveq	r3, #8
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bd2:	6866      	ldr	r6, [r4, #4]
 8003bd4:	60a6      	str	r6, [r4, #8]
 8003bd6:	2e00      	cmp	r6, #0
 8003bd8:	bfa2      	ittt	ge
 8003bda:	6821      	ldrge	r1, [r4, #0]
 8003bdc:	f021 0104 	bicge.w	r1, r1, #4
 8003be0:	6021      	strge	r1, [r4, #0]
 8003be2:	b90d      	cbnz	r5, 8003be8 <_printf_i+0x110>
 8003be4:	2e00      	cmp	r6, #0
 8003be6:	d04b      	beq.n	8003c80 <_printf_i+0x1a8>
 8003be8:	4616      	mov	r6, r2
 8003bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bee:	fb03 5711 	mls	r7, r3, r1, r5
 8003bf2:	5dc7      	ldrb	r7, [r0, r7]
 8003bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bf8:	462f      	mov	r7, r5
 8003bfa:	42bb      	cmp	r3, r7
 8003bfc:	460d      	mov	r5, r1
 8003bfe:	d9f4      	bls.n	8003bea <_printf_i+0x112>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d10b      	bne.n	8003c1c <_printf_i+0x144>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	07df      	lsls	r7, r3, #31
 8003c08:	d508      	bpl.n	8003c1c <_printf_i+0x144>
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	6861      	ldr	r1, [r4, #4]
 8003c0e:	4299      	cmp	r1, r3
 8003c10:	bfde      	ittt	le
 8003c12:	2330      	movle	r3, #48	@ 0x30
 8003c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c1c:	1b92      	subs	r2, r2, r6
 8003c1e:	6122      	str	r2, [r4, #16]
 8003c20:	f8cd a000 	str.w	sl, [sp]
 8003c24:	464b      	mov	r3, r9
 8003c26:	aa03      	add	r2, sp, #12
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff fee6 	bl	80039fc <_printf_common>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d14a      	bne.n	8003cca <_printf_i+0x1f2>
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	b004      	add	sp, #16
 8003c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f043 0320 	orr.w	r3, r3, #32
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	4833      	ldr	r0, [pc, #204]	@ (8003d14 <_printf_i+0x23c>)
 8003c48:	2778      	movs	r7, #120	@ 0x78
 8003c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	6831      	ldr	r1, [r6, #0]
 8003c52:	061f      	lsls	r7, r3, #24
 8003c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c58:	d402      	bmi.n	8003c60 <_printf_i+0x188>
 8003c5a:	065f      	lsls	r7, r3, #25
 8003c5c:	bf48      	it	mi
 8003c5e:	b2ad      	uxthmi	r5, r5
 8003c60:	6031      	str	r1, [r6, #0]
 8003c62:	07d9      	lsls	r1, r3, #31
 8003c64:	bf44      	itt	mi
 8003c66:	f043 0320 	orrmi.w	r3, r3, #32
 8003c6a:	6023      	strmi	r3, [r4, #0]
 8003c6c:	b11d      	cbz	r5, 8003c76 <_printf_i+0x19e>
 8003c6e:	2310      	movs	r3, #16
 8003c70:	e7ac      	b.n	8003bcc <_printf_i+0xf4>
 8003c72:	4827      	ldr	r0, [pc, #156]	@ (8003d10 <_printf_i+0x238>)
 8003c74:	e7e9      	b.n	8003c4a <_printf_i+0x172>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	f023 0320 	bic.w	r3, r3, #32
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	e7f6      	b.n	8003c6e <_printf_i+0x196>
 8003c80:	4616      	mov	r6, r2
 8003c82:	e7bd      	b.n	8003c00 <_printf_i+0x128>
 8003c84:	6833      	ldr	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	6961      	ldr	r1, [r4, #20]
 8003c8a:	1d18      	adds	r0, r3, #4
 8003c8c:	6030      	str	r0, [r6, #0]
 8003c8e:	062e      	lsls	r6, r5, #24
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	d501      	bpl.n	8003c98 <_printf_i+0x1c0>
 8003c94:	6019      	str	r1, [r3, #0]
 8003c96:	e002      	b.n	8003c9e <_printf_i+0x1c6>
 8003c98:	0668      	lsls	r0, r5, #25
 8003c9a:	d5fb      	bpl.n	8003c94 <_printf_i+0x1bc>
 8003c9c:	8019      	strh	r1, [r3, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	4616      	mov	r6, r2
 8003ca4:	e7bc      	b.n	8003c20 <_printf_i+0x148>
 8003ca6:	6833      	ldr	r3, [r6, #0]
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	6032      	str	r2, [r6, #0]
 8003cac:	681e      	ldr	r6, [r3, #0]
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7fc fa9c 	bl	80001f0 <memchr>
 8003cb8:	b108      	cbz	r0, 8003cbe <_printf_i+0x1e6>
 8003cba:	1b80      	subs	r0, r0, r6
 8003cbc:	6060      	str	r0, [r4, #4]
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc8:	e7aa      	b.n	8003c20 <_printf_i+0x148>
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	47d0      	blx	sl
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0ad      	beq.n	8003c34 <_printf_i+0x15c>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	079b      	lsls	r3, r3, #30
 8003cdc:	d413      	bmi.n	8003d06 <_printf_i+0x22e>
 8003cde:	68e0      	ldr	r0, [r4, #12]
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	4298      	cmp	r0, r3
 8003ce4:	bfb8      	it	lt
 8003ce6:	4618      	movlt	r0, r3
 8003ce8:	e7a6      	b.n	8003c38 <_printf_i+0x160>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4632      	mov	r2, r6
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	47d0      	blx	sl
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d09d      	beq.n	8003c34 <_printf_i+0x15c>
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	9903      	ldr	r1, [sp, #12]
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	dcf2      	bgt.n	8003cea <_printf_i+0x212>
 8003d04:	e7eb      	b.n	8003cde <_printf_i+0x206>
 8003d06:	2500      	movs	r5, #0
 8003d08:	f104 0619 	add.w	r6, r4, #25
 8003d0c:	e7f5      	b.n	8003cfa <_printf_i+0x222>
 8003d0e:	bf00      	nop
 8003d10:	08003ead 	.word	0x08003ead
 8003d14:	08003ebe 	.word	0x08003ebe

08003d18 <memmove>:
 8003d18:	4288      	cmp	r0, r1
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	eb01 0402 	add.w	r4, r1, r2
 8003d20:	d902      	bls.n	8003d28 <memmove+0x10>
 8003d22:	4284      	cmp	r4, r0
 8003d24:	4623      	mov	r3, r4
 8003d26:	d807      	bhi.n	8003d38 <memmove+0x20>
 8003d28:	1e43      	subs	r3, r0, #1
 8003d2a:	42a1      	cmp	r1, r4
 8003d2c:	d008      	beq.n	8003d40 <memmove+0x28>
 8003d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d36:	e7f8      	b.n	8003d2a <memmove+0x12>
 8003d38:	4402      	add	r2, r0
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d100      	bne.n	8003d42 <memmove+0x2a>
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d4a:	e7f7      	b.n	8003d3c <memmove+0x24>

08003d4c <_sbrk_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d06      	ldr	r5, [pc, #24]	@ (8003d68 <_sbrk_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	f7fd fc7c 	bl	8001654 <_sbrk>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_sbrk_r+0x1a>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_sbrk_r+0x1a>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	200002fc 	.word	0x200002fc

08003d6c <memcpy>:
 8003d6c:	440a      	add	r2, r1
 8003d6e:	4291      	cmp	r1, r2
 8003d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d74:	d100      	bne.n	8003d78 <memcpy+0xc>
 8003d76:	4770      	bx	lr
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d82:	4291      	cmp	r1, r2
 8003d84:	d1f9      	bne.n	8003d7a <memcpy+0xe>
 8003d86:	bd10      	pop	{r4, pc}

08003d88 <_realloc_r>:
 8003d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8c:	4680      	mov	r8, r0
 8003d8e:	4615      	mov	r5, r2
 8003d90:	460c      	mov	r4, r1
 8003d92:	b921      	cbnz	r1, 8003d9e <_realloc_r+0x16>
 8003d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d98:	4611      	mov	r1, r2
 8003d9a:	f7ff bc4b 	b.w	8003634 <_malloc_r>
 8003d9e:	b92a      	cbnz	r2, 8003dac <_realloc_r+0x24>
 8003da0:	f7ff fbdc 	bl	800355c <_free_r>
 8003da4:	2400      	movs	r4, #0
 8003da6:	4620      	mov	r0, r4
 8003da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dac:	f000 f81a 	bl	8003de4 <_malloc_usable_size_r>
 8003db0:	4285      	cmp	r5, r0
 8003db2:	4606      	mov	r6, r0
 8003db4:	d802      	bhi.n	8003dbc <_realloc_r+0x34>
 8003db6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003dba:	d8f4      	bhi.n	8003da6 <_realloc_r+0x1e>
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f7ff fc38 	bl	8003634 <_malloc_r>
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d0ec      	beq.n	8003da4 <_realloc_r+0x1c>
 8003dca:	42b5      	cmp	r5, r6
 8003dcc:	462a      	mov	r2, r5
 8003dce:	4621      	mov	r1, r4
 8003dd0:	bf28      	it	cs
 8003dd2:	4632      	movcs	r2, r6
 8003dd4:	f7ff ffca 	bl	8003d6c <memcpy>
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4640      	mov	r0, r8
 8003ddc:	f7ff fbbe 	bl	800355c <_free_r>
 8003de0:	463c      	mov	r4, r7
 8003de2:	e7e0      	b.n	8003da6 <_realloc_r+0x1e>

08003de4 <_malloc_usable_size_r>:
 8003de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de8:	1f18      	subs	r0, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbc      	itt	lt
 8003dee:	580b      	ldrlt	r3, [r1, r0]
 8003df0:	18c0      	addlt	r0, r0, r3
 8003df2:	4770      	bx	lr

08003df4 <_init>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	bf00      	nop
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr

08003e00 <_fini>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr
